"""
    Hivemind OpenAPI Specification

    An OpenAPI specification for Hivemind  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.community_context_request import CommunityContextRequest
from openapi_client.model.community_request import CommunityRequest
from openapi_client.model.list_all_subscriptions_request import ListAllSubscriptionsRequest
from openapi_client.model.list_communites_request import ListCommunitesRequest
from openapi_client.model.list_community_roles_request import ListCommunityRolesRequest
from openapi_client.model.list_pop_communites_request import ListPopCommunitesRequest
from openapi_client.model.list_subscribers_request import ListSubscribersRequest


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __bridge_get_community(
            self,
            community_request,
            **kwargs
        ):
            """bridge_get_community  # noqa: E501

            Gets community  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_get_community(community_request, async_req=True)
            >>> result = thread.get()

            Args:
                community_request (CommunityRequest): community name and optional observer

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['community_request'] = \
                community_request
            return self.call_with_http_info(**kwargs)

        self.bridge_get_community = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.get_community',
                'operation_id': 'bridge_get_community',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'community_request',
                ],
                'required': [
                    'community_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'community_request':
                        (CommunityRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'community_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_get_community
        )

        def __bridge_get_community_context(
            self,
            community_context_request,
            **kwargs
        ):
            """bridge_get_community_context  # noqa: E501

            Gets community context  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_get_community_context(community_context_request, async_req=True)
            >>> result = thread.get()

            Args:
                community_context_request (CommunityContextRequest): community name and account for context

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['community_context_request'] = \
                community_context_request
            return self.call_with_http_info(**kwargs)

        self.bridge_get_community_context = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.get_community_context',
                'operation_id': 'bridge_get_community_context',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'community_context_request',
                ],
                'required': [
                    'community_context_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'community_context_request':
                        (CommunityContextRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'community_context_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_get_community_context
        )

        def __bridge_list_all_subscriptions(
            self,
            list_all_subscriptions_request,
            **kwargs
        ):
            """bridge_list_all_subscriptions  # noqa: E501

            Lists all community contexts from communities given account is subscribed to.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_list_all_subscriptions(list_all_subscriptions_request, async_req=True)
            >>> result = thread.get()

            Args:
                list_all_subscriptions_request (ListAllSubscriptionsRequest): points to valid account (not necessarily subscibed to any community)

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_all_subscriptions_request'] = \
                list_all_subscriptions_request
            return self.call_with_http_info(**kwargs)

        self.bridge_list_all_subscriptions = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.list_all_subscriptions',
                'operation_id': 'bridge_list_all_subscriptions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_all_subscriptions_request',
                ],
                'required': [
                    'list_all_subscriptions_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_all_subscriptions_request':
                        (ListAllSubscriptionsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_all_subscriptions_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_list_all_subscriptions
        )

        def __bridge_list_communities(
            self,
            list_communites_request,
            **kwargs
        ):
            """bridge_list_communities  # noqa: E501

            Gets community  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_list_communities(list_communites_request, async_req=True)
            >>> result = thread.get()

            Args:
                list_communites_request (ListCommunitesRequest): optional parameters: last, limit, query, sort, observer

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_communites_request'] = \
                list_communites_request
            return self.call_with_http_info(**kwargs)

        self.bridge_list_communities = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.list_communities',
                'operation_id': 'bridge_list_communities',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_communites_request',
                ],
                'required': [
                    'list_communites_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_communites_request':
                        (ListCommunitesRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_communites_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_list_communities
        )

        def __bridge_list_community_roles(
            self,
            list_community_roles_request,
            **kwargs
        ):
            """bridge_list_community_roles  # noqa: E501

            Gets community  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_list_community_roles(list_community_roles_request, async_req=True)
            >>> result = thread.get()

            Args:
                list_community_roles_request (ListCommunityRolesRequest): community name and optional observer

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_community_roles_request'] = \
                list_community_roles_request
            return self.call_with_http_info(**kwargs)

        self.bridge_list_community_roles = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.list_community_roles',
                'operation_id': 'bridge_list_community_roles',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_community_roles_request',
                ],
                'required': [
                    'list_community_roles_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_community_roles_request':
                        (ListCommunityRolesRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_community_roles_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_list_community_roles
        )

        def __bridge_list_pop_communities(
            self,
            list_pop_communites_request,
            **kwargs
        ):
            """bridge_list_pop_communities  # noqa: E501

            Gets community  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_list_pop_communities(list_pop_communites_request, async_req=True)
            >>> result = thread.get()

            Args:
                list_pop_communites_request (ListPopCommunitesRequest): optional parameter: limit

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_pop_communites_request'] = \
                list_pop_communites_request
            return self.call_with_http_info(**kwargs)

        self.bridge_list_pop_communities = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.list_pop_communities',
                'operation_id': 'bridge_list_pop_communities',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_pop_communites_request',
                ],
                'required': [
                    'list_pop_communites_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_pop_communites_request':
                        (ListPopCommunitesRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_pop_communites_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_list_pop_communities
        )

        def __bridge_list_subscribers(
            self,
            list_subscribers_request,
            **kwargs
        ):
            """bridge_list_subscribers  # noqa: E501

            list subscribers  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_list_subscribers(list_subscribers_request, async_req=True)
            >>> result = thread.get()

            Args:
                list_subscribers_request (ListSubscribersRequest): required community, optional: last, limit

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_subscribers_request'] = \
                list_subscribers_request
            return self.call_with_http_info(**kwargs)

        self.bridge_list_subscribers = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.list_subscribers',
                'operation_id': 'bridge_list_subscribers',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_subscribers_request',
                ],
                'required': [
                    'list_subscribers_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_subscribers_request':
                        (ListSubscribersRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_subscribers_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_list_subscribers
        )
