# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.error_message_error import ErrorMessageError
from openapi_server import util

from openapi_server.models.error_message_error import ErrorMessageError  # noqa: E501

class ErrorMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, jsonrpc=None, error=None, id=None):  # noqa: E501
        """ErrorMessage - a model defined in OpenAPI

        :param jsonrpc: The jsonrpc of this ErrorMessage.  # noqa: E501
        :type jsonrpc: str
        :param error: The error of this ErrorMessage.  # noqa: E501
        :type error: ErrorMessageError
        :param id: The id of this ErrorMessage.  # noqa: E501
        :type id: int
        """
        self.openapi_types = {
            'jsonrpc': str,
            'error': ErrorMessageError,
            'id': int
        }

        self.attribute_map = {
            'jsonrpc': 'jsonrpc',
            'error': 'error',
            'id': 'id'
        }

        self._jsonrpc = jsonrpc
        self._error = error
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ErrorMessage of this ErrorMessage.  # noqa: E501
        :rtype: ErrorMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def jsonrpc(self):
        """Gets the jsonrpc of this ErrorMessage.


        :return: The jsonrpc of this ErrorMessage.
        :rtype: str
        """
        return self._jsonrpc

    @jsonrpc.setter
    def jsonrpc(self, jsonrpc):
        """Sets the jsonrpc of this ErrorMessage.


        :param jsonrpc: The jsonrpc of this ErrorMessage.
        :type jsonrpc: str
        """
        if jsonrpc is None:
            raise ValueError("Invalid value for `jsonrpc`, must not be `None`")  # noqa: E501

        self._jsonrpc = jsonrpc

    @property
    def error(self):
        """Gets the error of this ErrorMessage.


        :return: The error of this ErrorMessage.
        :rtype: ErrorMessageError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ErrorMessage.


        :param error: The error of this ErrorMessage.
        :type error: ErrorMessageError
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def id(self):
        """Gets the id of this ErrorMessage.


        :return: The id of this ErrorMessage.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ErrorMessage.


        :param id: The id of this ErrorMessage.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id
