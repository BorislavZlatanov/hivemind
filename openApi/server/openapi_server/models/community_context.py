# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CommunityContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role=None, subscribed=None, title=None):  # noqa: E501
        """CommunityContext - a model defined in OpenAPI

        :param role: The role of this CommunityContext.  # noqa: E501
        :type role: str
        :param subscribed: The subscribed of this CommunityContext.  # noqa: E501
        :type subscribed: bool
        :param title: The title of this CommunityContext.  # noqa: E501
        :type title: str
        """
        self.openapi_types = {
            'role': str,
            'subscribed': bool,
            'title': str
        }

        self.attribute_map = {
            'role': 'role',
            'subscribed': 'subscribed',
            'title': 'title'
        }

        self._role = role
        self._subscribed = subscribed
        self._title = title

    @classmethod
    def from_dict(cls, dikt) -> 'CommunityContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CommunityContext of this CommunityContext.  # noqa: E501
        :rtype: CommunityContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role(self):
        """Gets the role of this CommunityContext.


        :return: The role of this CommunityContext.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CommunityContext.


        :param role: The role of this CommunityContext.
        :type role: str
        """

        self._role = role

    @property
    def subscribed(self):
        """Gets the subscribed of this CommunityContext.


        :return: The subscribed of this CommunityContext.
        :rtype: bool
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this CommunityContext.


        :param subscribed: The subscribed of this CommunityContext.
        :type subscribed: bool
        """

        self._subscribed = subscribed

    @property
    def title(self):
        """Gets the title of this CommunityContext.


        :return: The title of this CommunityContext.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CommunityContext.


        :param title: The title of this CommunityContext.
        :type title: str
        """
        if title is not None and len(title) > 140:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `140`")  # noqa: E501
        if title is not None and len(title) < 0:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `0`")  # noqa: E501

        self._title = title
