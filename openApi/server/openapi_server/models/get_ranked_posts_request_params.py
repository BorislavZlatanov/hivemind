# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class GetRankedPostsRequestParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sort=None, start_author=None, start_permlink=None, limit=20, tag=None, observer=None):  # noqa: E501
        """GetRankedPostsRequestParams - a model defined in OpenAPI

        :param sort: The sort of this GetRankedPostsRequestParams.  # noqa: E501
        :type sort: str
        :param start_author: The start_author of this GetRankedPostsRequestParams.  # noqa: E501
        :type start_author: str
        :param start_permlink: The start_permlink of this GetRankedPostsRequestParams.  # noqa: E501
        :type start_permlink: str
        :param limit: The limit of this GetRankedPostsRequestParams.  # noqa: E501
        :type limit: int
        :param tag: The tag of this GetRankedPostsRequestParams.  # noqa: E501
        :type tag: str
        :param observer: The observer of this GetRankedPostsRequestParams.  # noqa: E501
        :type observer: str
        """
        self.openapi_types = {
            'sort': str,
            'start_author': str,
            'start_permlink': str,
            'limit': int,
            'tag': str,
            'observer': str
        }

        self.attribute_map = {
            'sort': 'sort',
            'start_author': 'start_author',
            'start_permlink': 'start_permlink',
            'limit': 'limit',
            'tag': 'tag',
            'observer': 'observer'
        }

        self._sort = sort
        self._start_author = start_author
        self._start_permlink = start_permlink
        self._limit = limit
        self._tag = tag
        self._observer = observer

    @classmethod
    def from_dict(cls, dikt) -> 'GetRankedPostsRequestParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetRankedPostsRequest_params of this GetRankedPostsRequestParams.  # noqa: E501
        :rtype: GetRankedPostsRequestParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sort(self):
        """Gets the sort of this GetRankedPostsRequestParams.

        ### Sort order: trending - [if tag is community pinned posts first], top posts with highest trending score first; paging cuts out given and more trending posts hot - top posts from blogs of accounts that given account is following ranked by creation/reblog time, not older than last month   created - [if tag is community pinned posts first], newest top posts first (grayed out not considered); paging cuts out given and newer posts promoted - promoted posts with highest promotion fund first; paging cuts out given and more promoted posts payout - only posts that will cashout between 12 and 36 hours from head block are considered, posts with higher pending payout first; paging cuts out given and higher payout posts payout_comments - only replies are considered, posts with higher pending payout first; paging cuts out given and higher payout posts muted - grayed out posts that are to receive nonzero payout are considered, posts with higher pending payout first; paging cuts out given and higher payout posts   # noqa: E501

        :return: The sort of this GetRankedPostsRequestParams.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this GetRankedPostsRequestParams.

        ### Sort order: trending - [if tag is community pinned posts first], top posts with highest trending score first; paging cuts out given and more trending posts hot - top posts from blogs of accounts that given account is following ranked by creation/reblog time, not older than last month   created - [if tag is community pinned posts first], newest top posts first (grayed out not considered); paging cuts out given and newer posts promoted - promoted posts with highest promotion fund first; paging cuts out given and more promoted posts payout - only posts that will cashout between 12 and 36 hours from head block are considered, posts with higher pending payout first; paging cuts out given and higher payout posts payout_comments - only replies are considered, posts with higher pending payout first; paging cuts out given and higher payout posts muted - grayed out posts that are to receive nonzero payout are considered, posts with higher pending payout first; paging cuts out given and higher payout posts   # noqa: E501

        :param sort: The sort of this GetRankedPostsRequestParams.
        :type sort: str
        """
        allowed_values = ["trending", "hot", "created", "promoted", "payout", "payout_comments", "muted"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def start_author(self):
        """Gets the start_author of this GetRankedPostsRequestParams.

        author account name, if passed must be passed with start_permlink  # noqa: E501

        :return: The start_author of this GetRankedPostsRequestParams.
        :rtype: str
        """
        return self._start_author

    @start_author.setter
    def start_author(self, start_author):
        """Sets the start_author of this GetRankedPostsRequestParams.

        author account name, if passed must be passed with start_permlink  # noqa: E501

        :param start_author: The start_author of this GetRankedPostsRequestParams.
        :type start_author: str
        """

        self._start_author = start_author

    @property
    def start_permlink(self):
        """Gets the start_permlink of this GetRankedPostsRequestParams.

        post permlink of given author, point to valid post, paging mechanism  # noqa: E501

        :return: The start_permlink of this GetRankedPostsRequestParams.
        :rtype: str
        """
        return self._start_permlink

    @start_permlink.setter
    def start_permlink(self, start_permlink):
        """Sets the start_permlink of this GetRankedPostsRequestParams.

        post permlink of given author, point to valid post, paging mechanism  # noqa: E501

        :param start_permlink: The start_permlink of this GetRankedPostsRequestParams.
        :type start_permlink: str
        """

        self._start_permlink = start_permlink

    @property
    def limit(self):
        """Gets the limit of this GetRankedPostsRequestParams.


        :return: The limit of this GetRankedPostsRequestParams.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetRankedPostsRequestParams.


        :param limit: The limit of this GetRankedPostsRequestParams.
        :type limit: int
        """
        if limit is not None and limit > 100:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `100`")  # noqa: E501
        if limit is not None and limit < 1:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limit = limit

    @property
    def tag(self):
        """Gets the tag of this GetRankedPostsRequestParams.

        my (with observer) - turns on filtering for posts within communities subscribed to by observer all - same as default none/blank hive-{number} - has to point to valid community; turns on filtering for posts within given community {tag} - has to point to valid tag; turns on filtering for posts with given tag (given category in case of 'payout' and 'payout_comments')   # noqa: E501

        :return: The tag of this GetRankedPostsRequestParams.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this GetRankedPostsRequestParams.

        my (with observer) - turns on filtering for posts within communities subscribed to by observer all - same as default none/blank hive-{number} - has to point to valid community; turns on filtering for posts within given community {tag} - has to point to valid tag; turns on filtering for posts with given tag (given category in case of 'payout' and 'payout_comments')   # noqa: E501

        :param tag: The tag of this GetRankedPostsRequestParams.
        :type tag: str
        """

        self._tag = tag

    @property
    def observer(self):
        """Gets the observer of this GetRankedPostsRequestParams.

        mandatory for \"my\" tag, points to valid account; when given supplements blacklists stats in posts and filters out posts of muted authors (with exception of \"muted\" sort)  # noqa: E501

        :return: The observer of this GetRankedPostsRequestParams.
        :rtype: str
        """
        return self._observer

    @observer.setter
    def observer(self, observer):
        """Sets the observer of this GetRankedPostsRequestParams.

        mandatory for \"my\" tag, points to valid account; when given supplements blacklists stats in posts and filters out posts of muted authors (with exception of \"muted\" sort)  # noqa: E501

        :param observer: The observer of this GetRankedPostsRequestParams.
        :type observer: str
        """

        self._observer = observer
