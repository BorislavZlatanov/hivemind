# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Beneficiares(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account=None, weight=None):  # noqa: E501
        """Beneficiares - a model defined in OpenAPI

        :param account: The account of this Beneficiares.  # noqa: E501
        :type account: str
        :param weight: The weight of this Beneficiares.  # noqa: E501
        :type weight: int
        """
        self.openapi_types = {
            'account': str,
            'weight': int
        }

        self.attribute_map = {
            'account': 'account',
            'weight': 'weight'
        }

        self._account = account
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt) -> 'Beneficiares':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Beneficiares of this Beneficiares.  # noqa: E501
        :rtype: Beneficiares
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Beneficiares.

        account name of the beneficient  # noqa: E501

        :return: The account of this Beneficiares.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Beneficiares.

        account name of the beneficient  # noqa: E501

        :param account: The account of this Beneficiares.
        :type account: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def weight(self):
        """Gets the weight of this Beneficiares.

        benefit amount (10000 = 100%)  # noqa: E501

        :return: The weight of this Beneficiares.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Beneficiares.

        benefit amount (10000 = 100%)  # noqa: E501

        :param weight: The weight of this Beneficiares.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight
