# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class GetAccountPostsRequestParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sort=None, account=None, start_author=None, start_permlink=None, limit=20, observer=None):  # noqa: E501
        """GetAccountPostsRequestParams - a model defined in OpenAPI

        :param sort: The sort of this GetAccountPostsRequestParams.  # noqa: E501
        :type sort: str
        :param account: The account of this GetAccountPostsRequestParams.  # noqa: E501
        :type account: str
        :param start_author: The start_author of this GetAccountPostsRequestParams.  # noqa: E501
        :type start_author: str
        :param start_permlink: The start_permlink of this GetAccountPostsRequestParams.  # noqa: E501
        :type start_permlink: str
        :param limit: The limit of this GetAccountPostsRequestParams.  # noqa: E501
        :type limit: int
        :param observer: The observer of this GetAccountPostsRequestParams.  # noqa: E501
        :type observer: str
        """
        self.openapi_types = {
            'sort': str,
            'account': str,
            'start_author': str,
            'start_permlink': str,
            'limit': int,
            'observer': str
        }

        self.attribute_map = {
            'sort': 'sort',
            'account': 'account',
            'start_author': 'start_author',
            'start_permlink': 'start_permlink',
            'limit': 'limit',
            'observer': 'observer'
        }

        self._sort = sort
        self._account = account
        self._start_author = start_author
        self._start_permlink = start_permlink
        self._limit = limit
        self._observer = observer

    @classmethod
    def from_dict(cls, dikt) -> 'GetAccountPostsRequestParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetAccountPostsRequest_params of this GetAccountPostsRequestParams.  # noqa: E501
        :rtype: GetAccountPostsRequestParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sort(self):
        """Gets the sort of this GetAccountPostsRequestParams.

        ### Sort order: blog - top posts authored by given account (excluding posts to communities - unless explicitely reblogged) plus reblogs ranked by creation/reblog time   feed - top posts from blogs of accounts that given account is following ranked by creation/reblog time, not older than last month   posts - op posts authored by given account, newer first   comments - replies authored by given account, newer first   replies - replies to posts of given account, newer first   payout - all posts authored by given account that were not yet cashed out   # noqa: E501

        :return: The sort of this GetAccountPostsRequestParams.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this GetAccountPostsRequestParams.

        ### Sort order: blog - top posts authored by given account (excluding posts to communities - unless explicitely reblogged) plus reblogs ranked by creation/reblog time   feed - top posts from blogs of accounts that given account is following ranked by creation/reblog time, not older than last month   posts - op posts authored by given account, newer first   comments - replies authored by given account, newer first   replies - replies to posts of given account, newer first   payout - all posts authored by given account that were not yet cashed out   # noqa: E501

        :param sort: The sort of this GetAccountPostsRequestParams.
        :type sort: str
        """
        allowed_values = ["blog", "feed", "posts", "comments", "replies", "payout"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def account(self):
        """Gets the account of this GetAccountPostsRequestParams.

        account name, points to valid account  # noqa: E501

        :return: The account of this GetAccountPostsRequestParams.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this GetAccountPostsRequestParams.

        account name, points to valid account  # noqa: E501

        :param account: The account of this GetAccountPostsRequestParams.
        :type account: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def start_author(self):
        """Gets the start_author of this GetAccountPostsRequestParams.

        author account name, if passed must be passed with start_permlink  # noqa: E501

        :return: The start_author of this GetAccountPostsRequestParams.
        :rtype: str
        """
        return self._start_author

    @start_author.setter
    def start_author(self, start_author):
        """Sets the start_author of this GetAccountPostsRequestParams.

        author account name, if passed must be passed with start_permlink  # noqa: E501

        :param start_author: The start_author of this GetAccountPostsRequestParams.
        :type start_author: str
        """

        self._start_author = start_author

    @property
    def start_permlink(self):
        """Gets the start_permlink of this GetAccountPostsRequestParams.

        post permlink of given author, point to valid post, paging mechanism  # noqa: E501

        :return: The start_permlink of this GetAccountPostsRequestParams.
        :rtype: str
        """
        return self._start_permlink

    @start_permlink.setter
    def start_permlink(self, start_permlink):
        """Sets the start_permlink of this GetAccountPostsRequestParams.

        post permlink of given author, point to valid post, paging mechanism  # noqa: E501

        :param start_permlink: The start_permlink of this GetAccountPostsRequestParams.
        :type start_permlink: str
        """

        self._start_permlink = start_permlink

    @property
    def limit(self):
        """Gets the limit of this GetAccountPostsRequestParams.


        :return: The limit of this GetAccountPostsRequestParams.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetAccountPostsRequestParams.


        :param limit: The limit of this GetAccountPostsRequestParams.
        :type limit: int
        """
        if limit is not None and limit > 100:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `100`")  # noqa: E501
        if limit is not None and limit < 1:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limit = limit

    @property
    def observer(self):
        """Gets the observer of this GetAccountPostsRequestParams.

        ignored for blog, feed and replies, otherwise when passed has to point to valid account used to fill blacklist stats and mark posts of authors blacklisted by observer, at this time ignored  # noqa: E501

        :return: The observer of this GetAccountPostsRequestParams.
        :rtype: str
        """
        return self._observer

    @observer.setter
    def observer(self, observer):
        """Sets the observer of this GetAccountPostsRequestParams.

        ignored for blog, feed and replies, otherwise when passed has to point to valid account used to fill blacklist stats and mark posts of authors blacklisted by observer, at this time ignored  # noqa: E501

        :param observer: The observer of this GetAccountPostsRequestParams.
        :type observer: str
        """

        self._observer = observer
