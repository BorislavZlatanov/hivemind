# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class GetRelationshipBetweenAccountsRequestParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acccount1=None, account1=None, observer=None):  # noqa: E501
        """GetRelationshipBetweenAccountsRequestParams - a model defined in OpenAPI

        :param acccount1: The acccount1 of this GetRelationshipBetweenAccountsRequestParams.  # noqa: E501
        :type acccount1: str
        :param account1: The account1 of this GetRelationshipBetweenAccountsRequestParams.  # noqa: E501
        :type account1: str
        :param observer: The observer of this GetRelationshipBetweenAccountsRequestParams.  # noqa: E501
        :type observer: str
        """
        self.openapi_types = {
            'acccount1': str,
            'account1': str,
            'observer': str
        }

        self.attribute_map = {
            'acccount1': 'acccount1',
            'account1': 'account1',
            'observer': 'observer'
        }

        self._acccount1 = acccount1
        self._account1 = account1
        self._observer = observer

    @classmethod
    def from_dict(cls, dikt) -> 'GetRelationshipBetweenAccountsRequestParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetRelationshipBetweenAccountsRequest_params of this GetRelationshipBetweenAccountsRequestParams.  # noqa: E501
        :rtype: GetRelationshipBetweenAccountsRequestParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acccount1(self):
        """Gets the acccount1 of this GetRelationshipBetweenAccountsRequestParams.

        valid account name  # noqa: E501

        :return: The acccount1 of this GetRelationshipBetweenAccountsRequestParams.
        :rtype: str
        """
        return self._acccount1

    @acccount1.setter
    def acccount1(self, acccount1):
        """Sets the acccount1 of this GetRelationshipBetweenAccountsRequestParams.

        valid account name  # noqa: E501

        :param acccount1: The acccount1 of this GetRelationshipBetweenAccountsRequestParams.
        :type acccount1: str
        """
        if acccount1 is None:
            raise ValueError("Invalid value for `acccount1`, must not be `None`")  # noqa: E501

        self._acccount1 = acccount1

    @property
    def account1(self):
        """Gets the account1 of this GetRelationshipBetweenAccountsRequestParams.

        valid account name  # noqa: E501

        :return: The account1 of this GetRelationshipBetweenAccountsRequestParams.
        :rtype: str
        """
        return self._account1

    @account1.setter
    def account1(self, account1):
        """Sets the account1 of this GetRelationshipBetweenAccountsRequestParams.

        valid account name  # noqa: E501

        :param account1: The account1 of this GetRelationshipBetweenAccountsRequestParams.
        :type account1: str
        """

        self._account1 = account1

    @property
    def observer(self):
        """Gets the observer of this GetRelationshipBetweenAccountsRequestParams.

        ignored (most likely not yet implemented extra for supplementing blacklist information)  # noqa: E501

        :return: The observer of this GetRelationshipBetweenAccountsRequestParams.
        :rtype: str
        """
        return self._observer

    @observer.setter
    def observer(self, observer):
        """Sets the observer of this GetRelationshipBetweenAccountsRequestParams.

        ignored (most likely not yet implemented extra for supplementing blacklist information)  # noqa: E501

        :param observer: The observer of this GetRelationshipBetweenAccountsRequestParams.
        :type observer: str
        """

        self._observer = observer
