# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AccountNotificationsRequestParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account=None, min_score=25, last_id=None, limit=100):  # noqa: E501
        """AccountNotificationsRequestParams - a model defined in OpenAPI

        :param account: The account of this AccountNotificationsRequestParams.  # noqa: E501
        :type account: str
        :param min_score: The min_score of this AccountNotificationsRequestParams.  # noqa: E501
        :type min_score: int
        :param last_id: The last_id of this AccountNotificationsRequestParams.  # noqa: E501
        :type last_id: int
        :param limit: The limit of this AccountNotificationsRequestParams.  # noqa: E501
        :type limit: int
        """
        self.openapi_types = {
            'account': str,
            'min_score': int,
            'last_id': int,
            'limit': int
        }

        self.attribute_map = {
            'account': 'account',
            'min_score': 'min_score',
            'last_id': 'last_id',
            'limit': 'limit'
        }

        self._account = account
        self._min_score = min_score
        self._last_id = last_id
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt) -> 'AccountNotificationsRequestParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountNotificationsRequest_params of this AccountNotificationsRequestParams.  # noqa: E501
        :rtype: AccountNotificationsRequestParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this AccountNotificationsRequestParams.

        account name  # noqa: E501

        :return: The account of this AccountNotificationsRequestParams.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AccountNotificationsRequestParams.

        account name  # noqa: E501

        :param account: The account of this AccountNotificationsRequestParams.
        :type account: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def min_score(self):
        """Gets the min_score of this AccountNotificationsRequestParams.

        minimal score of notifications to show  # noqa: E501

        :return: The min_score of this AccountNotificationsRequestParams.
        :rtype: int
        """
        return self._min_score

    @min_score.setter
    def min_score(self, min_score):
        """Sets the min_score of this AccountNotificationsRequestParams.

        minimal score of notifications to show  # noqa: E501

        :param min_score: The min_score of this AccountNotificationsRequestParams.
        :type min_score: int
        """
        if min_score is not None and min_score > 100:  # noqa: E501
            raise ValueError("Invalid value for `min_score`, must be a value less than or equal to `100`")  # noqa: E501
        if min_score is not None and min_score < 0:  # noqa: E501
            raise ValueError("Invalid value for `min_score`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_score = min_score

    @property
    def last_id(self):
        """Gets the last_id of this AccountNotificationsRequestParams.

        indicates newest notification to show; paging mechanism  # noqa: E501

        :return: The last_id of this AccountNotificationsRequestParams.
        :rtype: int
        """
        return self._last_id

    @last_id.setter
    def last_id(self, last_id):
        """Sets the last_id of this AccountNotificationsRequestParams.

        indicates newest notification to show; paging mechanism  # noqa: E501

        :param last_id: The last_id of this AccountNotificationsRequestParams.
        :type last_id: int
        """

        self._last_id = last_id

    @property
    def limit(self):
        """Gets the limit of this AccountNotificationsRequestParams.

        limit number of listed notifications  # noqa: E501

        :return: The limit of this AccountNotificationsRequestParams.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this AccountNotificationsRequestParams.

        limit number of listed notifications  # noqa: E501

        :param limit: The limit of this AccountNotificationsRequestParams.
        :type limit: int
        """
        if limit is not None and limit > 100:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `100`")  # noqa: E501
        if limit is not None and limit < 1:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limit = limit
