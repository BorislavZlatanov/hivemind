# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.active_votes import ActiveVotes
from openapi_server.models.beneficiares import Beneficiares
from openapi_server.models.get_post_stats import GetPostStats
from openapi_server import util

from openapi_server.models.active_votes import ActiveVotes  # noqa: E501
from openapi_server.models.beneficiares import Beneficiares  # noqa: E501
from openapi_server.models.get_post_stats import GetPostStats  # noqa: E501

class GetPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_votes=None, author=None, author_payout_value=None, author_reputation=None, beneficiaries=None, blacklists=None, body=None, category=None, children=None, created=None, curator_payout_value=None, depth=None, is_paidout=None, json_metadata=None, max_accepted_payout=None, net_rshares=None, payout=None, payout_at=None, pending_payout_value=None, percent_hbd=None, permlink=None, post_id=None, promoted=None, replies=None, stats=None, title=None, updated=None, url=None):  # noqa: E501
        """GetPost - a model defined in OpenAPI

        :param active_votes: The active_votes of this GetPost.  # noqa: E501
        :type active_votes: ActiveVotes
        :param author: The author of this GetPost.  # noqa: E501
        :type author: str
        :param author_payout_value: The author_payout_value of this GetPost.  # noqa: E501
        :type author_payout_value: str
        :param author_reputation: The author_reputation of this GetPost.  # noqa: E501
        :type author_reputation: float
        :param beneficiaries: The beneficiaries of this GetPost.  # noqa: E501
        :type beneficiaries: Beneficiares
        :param blacklists: The blacklists of this GetPost.  # noqa: E501
        :type blacklists: List[str]
        :param body: The body of this GetPost.  # noqa: E501
        :type body: str
        :param category: The category of this GetPost.  # noqa: E501
        :type category: str
        :param children: The children of this GetPost.  # noqa: E501
        :type children: int
        :param created: The created of this GetPost.  # noqa: E501
        :type created: datetime
        :param curator_payout_value: The curator_payout_value of this GetPost.  # noqa: E501
        :type curator_payout_value: str
        :param depth: The depth of this GetPost.  # noqa: E501
        :type depth: int
        :param is_paidout: The is_paidout of this GetPost.  # noqa: E501
        :type is_paidout: bool
        :param json_metadata: The json_metadata of this GetPost.  # noqa: E501
        :type json_metadata: object
        :param max_accepted_payout: The max_accepted_payout of this GetPost.  # noqa: E501
        :type max_accepted_payout: str
        :param net_rshares: The net_rshares of this GetPost.  # noqa: E501
        :type net_rshares: int
        :param payout: The payout of this GetPost.  # noqa: E501
        :type payout: float
        :param payout_at: The payout_at of this GetPost.  # noqa: E501
        :type payout_at: datetime
        :param pending_payout_value: The pending_payout_value of this GetPost.  # noqa: E501
        :type pending_payout_value: str
        :param percent_hbd: The percent_hbd of this GetPost.  # noqa: E501
        :type percent_hbd: int
        :param permlink: The permlink of this GetPost.  # noqa: E501
        :type permlink: str
        :param post_id: The post_id of this GetPost.  # noqa: E501
        :type post_id: int
        :param promoted: The promoted of this GetPost.  # noqa: E501
        :type promoted: str
        :param replies: The replies of this GetPost.  # noqa: E501
        :type replies: List[str]
        :param stats: The stats of this GetPost.  # noqa: E501
        :type stats: GetPostStats
        :param title: The title of this GetPost.  # noqa: E501
        :type title: str
        :param updated: The updated of this GetPost.  # noqa: E501
        :type updated: datetime
        :param url: The url of this GetPost.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'active_votes': ActiveVotes,
            'author': str,
            'author_payout_value': str,
            'author_reputation': float,
            'beneficiaries': Beneficiares,
            'blacklists': List[str],
            'body': str,
            'category': str,
            'children': int,
            'created': datetime,
            'curator_payout_value': str,
            'depth': int,
            'is_paidout': bool,
            'json_metadata': object,
            'max_accepted_payout': str,
            'net_rshares': int,
            'payout': float,
            'payout_at': datetime,
            'pending_payout_value': str,
            'percent_hbd': int,
            'permlink': str,
            'post_id': int,
            'promoted': str,
            'replies': List[str],
            'stats': GetPostStats,
            'title': str,
            'updated': datetime,
            'url': str
        }

        self.attribute_map = {
            'active_votes': 'active_votes',
            'author': 'author',
            'author_payout_value': 'author_payout_value',
            'author_reputation': 'author_reputation',
            'beneficiaries': 'beneficiaries',
            'blacklists': 'blacklists',
            'body': 'body',
            'category': 'category',
            'children': 'children',
            'created': 'created',
            'curator_payout_value': 'curator_payout_value',
            'depth': 'depth',
            'is_paidout': 'is_paidout',
            'json_metadata': 'json_metadata',
            'max_accepted_payout': 'max_accepted_payout',
            'net_rshares': 'net_rshares',
            'payout': 'payout',
            'payout_at': 'payout_at',
            'pending_payout_value': 'pending_payout_value',
            'percent_hbd': 'percent_hbd',
            'permlink': 'permlink',
            'post_id': 'post_id',
            'promoted': 'promoted',
            'replies': 'replies',
            'stats': 'stats',
            'title': 'title',
            'updated': 'updated',
            'url': 'url'
        }

        self._active_votes = active_votes
        self._author = author
        self._author_payout_value = author_payout_value
        self._author_reputation = author_reputation
        self._beneficiaries = beneficiaries
        self._blacklists = blacklists
        self._body = body
        self._category = category
        self._children = children
        self._created = created
        self._curator_payout_value = curator_payout_value
        self._depth = depth
        self._is_paidout = is_paidout
        self._json_metadata = json_metadata
        self._max_accepted_payout = max_accepted_payout
        self._net_rshares = net_rshares
        self._payout = payout
        self._payout_at = payout_at
        self._pending_payout_value = pending_payout_value
        self._percent_hbd = percent_hbd
        self._permlink = permlink
        self._post_id = post_id
        self._promoted = promoted
        self._replies = replies
        self._stats = stats
        self._title = title
        self._updated = updated
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'GetPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetPost of this GetPost.  # noqa: E501
        :rtype: GetPost
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_votes(self):
        """Gets the active_votes of this GetPost.


        :return: The active_votes of this GetPost.
        :rtype: ActiveVotes
        """
        return self._active_votes

    @active_votes.setter
    def active_votes(self, active_votes):
        """Sets the active_votes of this GetPost.


        :param active_votes: The active_votes of this GetPost.
        :type active_votes: ActiveVotes
        """
        if active_votes is None:
            raise ValueError("Invalid value for `active_votes`, must not be `None`")  # noqa: E501

        self._active_votes = active_votes

    @property
    def author(self):
        """Gets the author of this GetPost.

        account name of the post's author  # noqa: E501

        :return: The author of this GetPost.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this GetPost.

        account name of the post's author  # noqa: E501

        :param author: The author of this GetPost.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def author_payout_value(self):
        """Gets the author_payout_value of this GetPost.

        HBD paid to the author of the post  # noqa: E501

        :return: The author_payout_value of this GetPost.
        :rtype: str
        """
        return self._author_payout_value

    @author_payout_value.setter
    def author_payout_value(self, author_payout_value):
        """Sets the author_payout_value of this GetPost.

        HBD paid to the author of the post  # noqa: E501

        :param author_payout_value: The author_payout_value of this GetPost.
        :type author_payout_value: str
        """
        if author_payout_value is None:
            raise ValueError("Invalid value for `author_payout_value`, must not be `None`")  # noqa: E501

        self._author_payout_value = author_payout_value

    @property
    def author_reputation(self):
        """Gets the author_reputation of this GetPost.

        author's reputation score  # noqa: E501

        :return: The author_reputation of this GetPost.
        :rtype: float
        """
        return self._author_reputation

    @author_reputation.setter
    def author_reputation(self, author_reputation):
        """Sets the author_reputation of this GetPost.

        author's reputation score  # noqa: E501

        :param author_reputation: The author_reputation of this GetPost.
        :type author_reputation: float
        """
        if author_reputation is None:
            raise ValueError("Invalid value for `author_reputation`, must not be `None`")  # noqa: E501

        self._author_reputation = author_reputation

    @property
    def beneficiaries(self):
        """Gets the beneficiaries of this GetPost.


        :return: The beneficiaries of this GetPost.
        :rtype: Beneficiares
        """
        return self._beneficiaries

    @beneficiaries.setter
    def beneficiaries(self, beneficiaries):
        """Sets the beneficiaries of this GetPost.


        :param beneficiaries: The beneficiaries of this GetPost.
        :type beneficiaries: Beneficiares
        """
        if beneficiaries is None:
            raise ValueError("Invalid value for `beneficiaries`, must not be `None`")  # noqa: E501

        self._beneficiaries = beneficiaries

    @property
    def blacklists(self):
        """Gets the blacklists of this GetPost.


        :return: The blacklists of this GetPost.
        :rtype: List[str]
        """
        return self._blacklists

    @blacklists.setter
    def blacklists(self, blacklists):
        """Sets the blacklists of this GetPost.


        :param blacklists: The blacklists of this GetPost.
        :type blacklists: List[str]
        """
        if blacklists is None:
            raise ValueError("Invalid value for `blacklists`, must not be `None`")  # noqa: E501

        self._blacklists = blacklists

    @property
    def body(self):
        """Gets the body of this GetPost.

        post content  # noqa: E501

        :return: The body of this GetPost.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this GetPost.

        post content  # noqa: E501

        :param body: The body of this GetPost.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def category(self):
        """Gets the category of this GetPost.

        post category  # noqa: E501

        :return: The category of this GetPost.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this GetPost.

        post category  # noqa: E501

        :param category: The category of this GetPost.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def children(self):
        """Gets the children of this GetPost.

        number of children comments  # noqa: E501

        :return: The children of this GetPost.
        :rtype: int
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this GetPost.

        number of children comments  # noqa: E501

        :param children: The children of this GetPost.
        :type children: int
        """
        if children is None:
            raise ValueError("Invalid value for `children`, must not be `None`")  # noqa: E501

        self._children = children

    @property
    def created(self):
        """Gets the created of this GetPost.

        creation date  # noqa: E501

        :return: The created of this GetPost.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this GetPost.

        creation date  # noqa: E501

        :param created: The created of this GetPost.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def curator_payout_value(self):
        """Gets the curator_payout_value of this GetPost.

        amount of HBD paid to curators  # noqa: E501

        :return: The curator_payout_value of this GetPost.
        :rtype: str
        """
        return self._curator_payout_value

    @curator_payout_value.setter
    def curator_payout_value(self, curator_payout_value):
        """Sets the curator_payout_value of this GetPost.

        amount of HBD paid to curators  # noqa: E501

        :param curator_payout_value: The curator_payout_value of this GetPost.
        :type curator_payout_value: str
        """
        if curator_payout_value is None:
            raise ValueError("Invalid value for `curator_payout_value`, must not be `None`")  # noqa: E501

        self._curator_payout_value = curator_payout_value

    @property
    def depth(self):
        """Gets the depth of this GetPost.

        nesting level  # noqa: E501

        :return: The depth of this GetPost.
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this GetPost.

        nesting level  # noqa: E501

        :param depth: The depth of this GetPost.
        :type depth: int
        """
        if depth is None:
            raise ValueError("Invalid value for `depth`, must not be `None`")  # noqa: E501

        self._depth = depth

    @property
    def is_paidout(self):
        """Gets the is_paidout of this GetPost.

        information whether the post has been paid  # noqa: E501

        :return: The is_paidout of this GetPost.
        :rtype: bool
        """
        return self._is_paidout

    @is_paidout.setter
    def is_paidout(self, is_paidout):
        """Sets the is_paidout of this GetPost.

        information whether the post has been paid  # noqa: E501

        :param is_paidout: The is_paidout of this GetPost.
        :type is_paidout: bool
        """
        if is_paidout is None:
            raise ValueError("Invalid value for `is_paidout`, must not be `None`")  # noqa: E501

        self._is_paidout = is_paidout

    @property
    def json_metadata(self):
        """Gets the json_metadata of this GetPost.


        :return: The json_metadata of this GetPost.
        :rtype: object
        """
        return self._json_metadata

    @json_metadata.setter
    def json_metadata(self, json_metadata):
        """Sets the json_metadata of this GetPost.


        :param json_metadata: The json_metadata of this GetPost.
        :type json_metadata: object
        """
        if json_metadata is None:
            raise ValueError("Invalid value for `json_metadata`, must not be `None`")  # noqa: E501

        self._json_metadata = json_metadata

    @property
    def max_accepted_payout(self):
        """Gets the max_accepted_payout of this GetPost.

        maximal possible payout  # noqa: E501

        :return: The max_accepted_payout of this GetPost.
        :rtype: str
        """
        return self._max_accepted_payout

    @max_accepted_payout.setter
    def max_accepted_payout(self, max_accepted_payout):
        """Sets the max_accepted_payout of this GetPost.

        maximal possible payout  # noqa: E501

        :param max_accepted_payout: The max_accepted_payout of this GetPost.
        :type max_accepted_payout: str
        """
        if max_accepted_payout is None:
            raise ValueError("Invalid value for `max_accepted_payout`, must not be `None`")  # noqa: E501

        self._max_accepted_payout = max_accepted_payout

    @property
    def net_rshares(self):
        """Gets the net_rshares of this GetPost.

        netto rshares, result of rshares allocations  # noqa: E501

        :return: The net_rshares of this GetPost.
        :rtype: int
        """
        return self._net_rshares

    @net_rshares.setter
    def net_rshares(self, net_rshares):
        """Sets the net_rshares of this GetPost.

        netto rshares, result of rshares allocations  # noqa: E501

        :param net_rshares: The net_rshares of this GetPost.
        :type net_rshares: int
        """
        if net_rshares is None:
            raise ValueError("Invalid value for `net_rshares`, must not be `None`")  # noqa: E501

        self._net_rshares = net_rshares

    @property
    def payout(self):
        """Gets the payout of this GetPost.

        amount of payout  # noqa: E501

        :return: The payout of this GetPost.
        :rtype: float
        """
        return self._payout

    @payout.setter
    def payout(self, payout):
        """Sets the payout of this GetPost.

        amount of payout  # noqa: E501

        :param payout: The payout of this GetPost.
        :type payout: float
        """
        if payout is None:
            raise ValueError("Invalid value for `payout`, must not be `None`")  # noqa: E501

        self._payout = payout

    @property
    def payout_at(self):
        """Gets the payout_at of this GetPost.

        date of payout  # noqa: E501

        :return: The payout_at of this GetPost.
        :rtype: datetime
        """
        return self._payout_at

    @payout_at.setter
    def payout_at(self, payout_at):
        """Sets the payout_at of this GetPost.

        date of payout  # noqa: E501

        :param payout_at: The payout_at of this GetPost.
        :type payout_at: datetime
        """
        if payout_at is None:
            raise ValueError("Invalid value for `payout_at`, must not be `None`")  # noqa: E501

        self._payout_at = payout_at

    @property
    def pending_payout_value(self):
        """Gets the pending_payout_value of this GetPost.

        pending or paid amount  # noqa: E501

        :return: The pending_payout_value of this GetPost.
        :rtype: str
        """
        return self._pending_payout_value

    @pending_payout_value.setter
    def pending_payout_value(self, pending_payout_value):
        """Sets the pending_payout_value of this GetPost.

        pending or paid amount  # noqa: E501

        :param pending_payout_value: The pending_payout_value of this GetPost.
        :type pending_payout_value: str
        """
        if pending_payout_value is None:
            raise ValueError("Invalid value for `pending_payout_value`, must not be `None`")  # noqa: E501

        self._pending_payout_value = pending_payout_value

    @property
    def percent_hbd(self):
        """Gets the percent_hbd of this GetPost.

        percent of HBD, 1000 = 100%  # noqa: E501

        :return: The percent_hbd of this GetPost.
        :rtype: int
        """
        return self._percent_hbd

    @percent_hbd.setter
    def percent_hbd(self, percent_hbd):
        """Sets the percent_hbd of this GetPost.

        percent of HBD, 1000 = 100%  # noqa: E501

        :param percent_hbd: The percent_hbd of this GetPost.
        :type percent_hbd: int
        """
        if percent_hbd is None:
            raise ValueError("Invalid value for `percent_hbd`, must not be `None`")  # noqa: E501

        self._percent_hbd = percent_hbd

    @property
    def permlink(self):
        """Gets the permlink of this GetPost.

        post's permlink  # noqa: E501

        :return: The permlink of this GetPost.
        :rtype: str
        """
        return self._permlink

    @permlink.setter
    def permlink(self, permlink):
        """Sets the permlink of this GetPost.

        post's permlink  # noqa: E501

        :param permlink: The permlink of this GetPost.
        :type permlink: str
        """
        if permlink is None:
            raise ValueError("Invalid value for `permlink`, must not be `None`")  # noqa: E501

        self._permlink = permlink

    @property
    def post_id(self):
        """Gets the post_id of this GetPost.

        id of the post, created from the author and the permlink  # noqa: E501

        :return: The post_id of this GetPost.
        :rtype: int
        """
        return self._post_id

    @post_id.setter
    def post_id(self, post_id):
        """Sets the post_id of this GetPost.

        id of the post, created from the author and the permlink  # noqa: E501

        :param post_id: The post_id of this GetPost.
        :type post_id: int
        """
        if post_id is None:
            raise ValueError("Invalid value for `post_id`, must not be `None`")  # noqa: E501

        self._post_id = post_id

    @property
    def promoted(self):
        """Gets the promoted of this GetPost.

        amount of HBD if post is promoted  # noqa: E501

        :return: The promoted of this GetPost.
        :rtype: str
        """
        return self._promoted

    @promoted.setter
    def promoted(self, promoted):
        """Sets the promoted of this GetPost.

        amount of HBD if post is promoted  # noqa: E501

        :param promoted: The promoted of this GetPost.
        :type promoted: str
        """
        if promoted is None:
            raise ValueError("Invalid value for `promoted`, must not be `None`")  # noqa: E501

        self._promoted = promoted

    @property
    def replies(self):
        """Gets the replies of this GetPost.


        :return: The replies of this GetPost.
        :rtype: List[str]
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this GetPost.


        :param replies: The replies of this GetPost.
        :type replies: List[str]
        """
        if replies is None:
            raise ValueError("Invalid value for `replies`, must not be `None`")  # noqa: E501

        self._replies = replies

    @property
    def stats(self):
        """Gets the stats of this GetPost.


        :return: The stats of this GetPost.
        :rtype: GetPostStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this GetPost.


        :param stats: The stats of this GetPost.
        :type stats: GetPostStats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")  # noqa: E501

        self._stats = stats

    @property
    def title(self):
        """Gets the title of this GetPost.

        post title  # noqa: E501

        :return: The title of this GetPost.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetPost.

        post title  # noqa: E501

        :param title: The title of this GetPost.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def updated(self):
        """Gets the updated of this GetPost.

        date of update  # noqa: E501

        :return: The updated of this GetPost.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this GetPost.

        date of update  # noqa: E501

        :param updated: The updated of this GetPost.
        :type updated: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def url(self):
        """Gets the url of this GetPost.

        end of the url to the post, contains category, author and permlink  # noqa: E501

        :return: The url of this GetPost.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetPost.

        end of the url to the post, contains category, author and permlink  # noqa: E501

        :param url: The url of this GetPost.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url
