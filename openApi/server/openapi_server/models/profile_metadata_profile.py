# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ProfileMetadataProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about=None, blacklist_description=None, cover_image=None, location=None, muted_list_description=None, name=None, profile_image=None, website=None):  # noqa: E501
        """ProfileMetadataProfile - a model defined in OpenAPI

        :param about: The about of this ProfileMetadataProfile.  # noqa: E501
        :type about: str
        :param blacklist_description: The blacklist_description of this ProfileMetadataProfile.  # noqa: E501
        :type blacklist_description: str
        :param cover_image: The cover_image of this ProfileMetadataProfile.  # noqa: E501
        :type cover_image: str
        :param location: The location of this ProfileMetadataProfile.  # noqa: E501
        :type location: str
        :param muted_list_description: The muted_list_description of this ProfileMetadataProfile.  # noqa: E501
        :type muted_list_description: str
        :param name: The name of this ProfileMetadataProfile.  # noqa: E501
        :type name: str
        :param profile_image: The profile_image of this ProfileMetadataProfile.  # noqa: E501
        :type profile_image: str
        :param website: The website of this ProfileMetadataProfile.  # noqa: E501
        :type website: str
        """
        self.openapi_types = {
            'about': str,
            'blacklist_description': str,
            'cover_image': str,
            'location': str,
            'muted_list_description': str,
            'name': str,
            'profile_image': str,
            'website': str
        }

        self.attribute_map = {
            'about': 'about',
            'blacklist_description': 'blacklist_description',
            'cover_image': 'cover_image',
            'location': 'location',
            'muted_list_description': 'muted_list_description',
            'name': 'name',
            'profile_image': 'profile_image',
            'website': 'website'
        }

        self._about = about
        self._blacklist_description = blacklist_description
        self._cover_image = cover_image
        self._location = location
        self._muted_list_description = muted_list_description
        self._name = name
        self._profile_image = profile_image
        self._website = website

    @classmethod
    def from_dict(cls, dikt) -> 'ProfileMetadataProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Profile_metadata_profile of this ProfileMetadataProfile.  # noqa: E501
        :rtype: ProfileMetadataProfile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about(self):
        """Gets the about of this ProfileMetadataProfile.


        :return: The about of this ProfileMetadataProfile.
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this ProfileMetadataProfile.


        :param about: The about of this ProfileMetadataProfile.
        :type about: str
        """
        if about is None:
            raise ValueError("Invalid value for `about`, must not be `None`")  # noqa: E501

        self._about = about

    @property
    def blacklist_description(self):
        """Gets the blacklist_description of this ProfileMetadataProfile.


        :return: The blacklist_description of this ProfileMetadataProfile.
        :rtype: str
        """
        return self._blacklist_description

    @blacklist_description.setter
    def blacklist_description(self, blacklist_description):
        """Sets the blacklist_description of this ProfileMetadataProfile.


        :param blacklist_description: The blacklist_description of this ProfileMetadataProfile.
        :type blacklist_description: str
        """
        if blacklist_description is None:
            raise ValueError("Invalid value for `blacklist_description`, must not be `None`")  # noqa: E501

        self._blacklist_description = blacklist_description

    @property
    def cover_image(self):
        """Gets the cover_image of this ProfileMetadataProfile.


        :return: The cover_image of this ProfileMetadataProfile.
        :rtype: str
        """
        return self._cover_image

    @cover_image.setter
    def cover_image(self, cover_image):
        """Sets the cover_image of this ProfileMetadataProfile.


        :param cover_image: The cover_image of this ProfileMetadataProfile.
        :type cover_image: str
        """
        if cover_image is None:
            raise ValueError("Invalid value for `cover_image`, must not be `None`")  # noqa: E501

        self._cover_image = cover_image

    @property
    def location(self):
        """Gets the location of this ProfileMetadataProfile.


        :return: The location of this ProfileMetadataProfile.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ProfileMetadataProfile.


        :param location: The location of this ProfileMetadataProfile.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def muted_list_description(self):
        """Gets the muted_list_description of this ProfileMetadataProfile.


        :return: The muted_list_description of this ProfileMetadataProfile.
        :rtype: str
        """
        return self._muted_list_description

    @muted_list_description.setter
    def muted_list_description(self, muted_list_description):
        """Sets the muted_list_description of this ProfileMetadataProfile.


        :param muted_list_description: The muted_list_description of this ProfileMetadataProfile.
        :type muted_list_description: str
        """
        if muted_list_description is None:
            raise ValueError("Invalid value for `muted_list_description`, must not be `None`")  # noqa: E501

        self._muted_list_description = muted_list_description

    @property
    def name(self):
        """Gets the name of this ProfileMetadataProfile.


        :return: The name of this ProfileMetadataProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProfileMetadataProfile.


        :param name: The name of this ProfileMetadataProfile.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def profile_image(self):
        """Gets the profile_image of this ProfileMetadataProfile.


        :return: The profile_image of this ProfileMetadataProfile.
        :rtype: str
        """
        return self._profile_image

    @profile_image.setter
    def profile_image(self, profile_image):
        """Sets the profile_image of this ProfileMetadataProfile.


        :param profile_image: The profile_image of this ProfileMetadataProfile.
        :type profile_image: str
        """
        if profile_image is None:
            raise ValueError("Invalid value for `profile_image`, must not be `None`")  # noqa: E501

        self._profile_image = profile_image

    @property
    def website(self):
        """Gets the website of this ProfileMetadataProfile.


        :return: The website of this ProfileMetadataProfile.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this ProfileMetadataProfile.


        :param website: The website of this ProfileMetadataProfile.
        :type website: str
        """
        if website is None:
            raise ValueError("Invalid value for `website`, must not be `None`")  # noqa: E501

        self._website = website
