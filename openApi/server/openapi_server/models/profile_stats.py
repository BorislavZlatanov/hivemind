# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ProfileStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, followers=None, following=None, rank=None):  # noqa: E501
        """ProfileStats - a model defined in OpenAPI

        :param followers: The followers of this ProfileStats.  # noqa: E501
        :type followers: int
        :param following: The following of this ProfileStats.  # noqa: E501
        :type following: int
        :param rank: The rank of this ProfileStats.  # noqa: E501
        :type rank: int
        """
        self.openapi_types = {
            'followers': int,
            'following': int,
            'rank': int
        }

        self.attribute_map = {
            'followers': 'followers',
            'following': 'following',
            'rank': 'rank'
        }

        self._followers = followers
        self._following = following
        self._rank = rank

    @classmethod
    def from_dict(cls, dikt) -> 'ProfileStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Profile_stats of this ProfileStats.  # noqa: E501
        :rtype: ProfileStats
        """
        return util.deserialize_model(dikt, cls)

    @property
    def followers(self):
        """Gets the followers of this ProfileStats.


        :return: The followers of this ProfileStats.
        :rtype: int
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this ProfileStats.


        :param followers: The followers of this ProfileStats.
        :type followers: int
        """
        if followers is None:
            raise ValueError("Invalid value for `followers`, must not be `None`")  # noqa: E501

        self._followers = followers

    @property
    def following(self):
        """Gets the following of this ProfileStats.


        :return: The following of this ProfileStats.
        :rtype: int
        """
        return self._following

    @following.setter
    def following(self, following):
        """Sets the following of this ProfileStats.


        :param following: The following of this ProfileStats.
        :type following: int
        """
        if following is None:
            raise ValueError("Invalid value for `following`, must not be `None`")  # noqa: E501

        self._following = following

    @property
    def rank(self):
        """Gets the rank of this ProfileStats.


        :return: The rank of this ProfileStats.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this ProfileStats.


        :param rank: The rank of this ProfileStats.
        :type rank: int
        """
        if rank is None:
            raise ValueError("Invalid value for `rank`, must not be `None`")  # noqa: E501

        self._rank = rank
