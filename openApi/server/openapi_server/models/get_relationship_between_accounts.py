# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class GetRelationshipBetweenAccounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blacklists=None, follows=None, follow_blacklists=None, follow_muted=None, ignores=None):  # noqa: E501
        """GetRelationshipBetweenAccounts - a model defined in OpenAPI

        :param blacklists: The blacklists of this GetRelationshipBetweenAccounts.  # noqa: E501
        :type blacklists: bool
        :param follows: The follows of this GetRelationshipBetweenAccounts.  # noqa: E501
        :type follows: bool
        :param follow_blacklists: The follow_blacklists of this GetRelationshipBetweenAccounts.  # noqa: E501
        :type follow_blacklists: bool
        :param follow_muted: The follow_muted of this GetRelationshipBetweenAccounts.  # noqa: E501
        :type follow_muted: bool
        :param ignores: The ignores of this GetRelationshipBetweenAccounts.  # noqa: E501
        :type ignores: bool
        """
        self.openapi_types = {
            'blacklists': bool,
            'follows': bool,
            'follow_blacklists': bool,
            'follow_muted': bool,
            'ignores': bool
        }

        self.attribute_map = {
            'blacklists': 'blacklists',
            'follows': 'follows',
            'follow_blacklists': 'follow_blacklists',
            'follow_muted': 'follow_muted',
            'ignores': 'ignores'
        }

        self._blacklists = blacklists
        self._follows = follows
        self._follow_blacklists = follow_blacklists
        self._follow_muted = follow_muted
        self._ignores = ignores

    @classmethod
    def from_dict(cls, dikt) -> 'GetRelationshipBetweenAccounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetRelationshipBetweenAccounts of this GetRelationshipBetweenAccounts.  # noqa: E501
        :rtype: GetRelationshipBetweenAccounts
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blacklists(self):
        """Gets the blacklists of this GetRelationshipBetweenAccounts.


        :return: The blacklists of this GetRelationshipBetweenAccounts.
        :rtype: bool
        """
        return self._blacklists

    @blacklists.setter
    def blacklists(self, blacklists):
        """Sets the blacklists of this GetRelationshipBetweenAccounts.


        :param blacklists: The blacklists of this GetRelationshipBetweenAccounts.
        :type blacklists: bool
        """
        if blacklists is None:
            raise ValueError("Invalid value for `blacklists`, must not be `None`")  # noqa: E501

        self._blacklists = blacklists

    @property
    def follows(self):
        """Gets the follows of this GetRelationshipBetweenAccounts.


        :return: The follows of this GetRelationshipBetweenAccounts.
        :rtype: bool
        """
        return self._follows

    @follows.setter
    def follows(self, follows):
        """Sets the follows of this GetRelationshipBetweenAccounts.


        :param follows: The follows of this GetRelationshipBetweenAccounts.
        :type follows: bool
        """
        if follows is None:
            raise ValueError("Invalid value for `follows`, must not be `None`")  # noqa: E501

        self._follows = follows

    @property
    def follow_blacklists(self):
        """Gets the follow_blacklists of this GetRelationshipBetweenAccounts.


        :return: The follow_blacklists of this GetRelationshipBetweenAccounts.
        :rtype: bool
        """
        return self._follow_blacklists

    @follow_blacklists.setter
    def follow_blacklists(self, follow_blacklists):
        """Sets the follow_blacklists of this GetRelationshipBetweenAccounts.


        :param follow_blacklists: The follow_blacklists of this GetRelationshipBetweenAccounts.
        :type follow_blacklists: bool
        """
        if follow_blacklists is None:
            raise ValueError("Invalid value for `follow_blacklists`, must not be `None`")  # noqa: E501

        self._follow_blacklists = follow_blacklists

    @property
    def follow_muted(self):
        """Gets the follow_muted of this GetRelationshipBetweenAccounts.


        :return: The follow_muted of this GetRelationshipBetweenAccounts.
        :rtype: bool
        """
        return self._follow_muted

    @follow_muted.setter
    def follow_muted(self, follow_muted):
        """Sets the follow_muted of this GetRelationshipBetweenAccounts.


        :param follow_muted: The follow_muted of this GetRelationshipBetweenAccounts.
        :type follow_muted: bool
        """
        if follow_muted is None:
            raise ValueError("Invalid value for `follow_muted`, must not be `None`")  # noqa: E501

        self._follow_muted = follow_muted

    @property
    def ignores(self):
        """Gets the ignores of this GetRelationshipBetweenAccounts.


        :return: The ignores of this GetRelationshipBetweenAccounts.
        :rtype: bool
        """
        return self._ignores

    @ignores.setter
    def ignores(self, ignores):
        """Sets the ignores of this GetRelationshipBetweenAccounts.


        :param ignores: The ignores of this GetRelationshipBetweenAccounts.
        :type ignores: bool
        """
        if ignores is None:
            raise ValueError("Invalid value for `ignores`, must not be `None`")  # noqa: E501

        self._ignores = ignores
