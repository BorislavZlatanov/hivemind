# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.profile_metadata import ProfileMetadata
from openapi_server.models.profile_stats import ProfileStats
from openapi_server import util

from openapi_server.models.profile_metadata import ProfileMetadata  # noqa: E501
from openapi_server.models.profile_stats import ProfileStats  # noqa: E501

class Profile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, active=None, blacklists=None, created=None, metadata=None, name=None, post_count=None, reputation=None, stats=None):  # noqa: E501
        """Profile - a model defined in OpenAPI

        :param id: The id of this Profile.  # noqa: E501
        :type id: int
        :param active: The active of this Profile.  # noqa: E501
        :type active: datetime
        :param blacklists: The blacklists of this Profile.  # noqa: E501
        :type blacklists: List[str]
        :param created: The created of this Profile.  # noqa: E501
        :type created: datetime
        :param metadata: The metadata of this Profile.  # noqa: E501
        :type metadata: ProfileMetadata
        :param name: The name of this Profile.  # noqa: E501
        :type name: str
        :param post_count: The post_count of this Profile.  # noqa: E501
        :type post_count: int
        :param reputation: The reputation of this Profile.  # noqa: E501
        :type reputation: int
        :param stats: The stats of this Profile.  # noqa: E501
        :type stats: ProfileStats
        """
        self.openapi_types = {
            'id': int,
            'active': datetime,
            'blacklists': List[str],
            'created': datetime,
            'metadata': ProfileMetadata,
            'name': str,
            'post_count': int,
            'reputation': int,
            'stats': ProfileStats
        }

        self.attribute_map = {
            'id': 'id',
            'active': 'active',
            'blacklists': 'blacklists',
            'created': 'created',
            'metadata': 'metadata',
            'name': 'name',
            'post_count': 'post_count',
            'reputation': 'reputation',
            'stats': 'stats'
        }

        self._id = id
        self._active = active
        self._blacklists = blacklists
        self._created = created
        self._metadata = metadata
        self._name = name
        self._post_count = post_count
        self._reputation = reputation
        self._stats = stats

    @classmethod
    def from_dict(cls, dikt) -> 'Profile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Profile of this Profile.  # noqa: E501
        :rtype: Profile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Profile.


        :return: The id of this Profile.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Profile.


        :param id: The id of this Profile.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def active(self):
        """Gets the active of this Profile.

        date of last activity  # noqa: E501

        :return: The active of this Profile.
        :rtype: datetime
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Profile.

        date of last activity  # noqa: E501

        :param active: The active of this Profile.
        :type active: datetime
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def blacklists(self):
        """Gets the blacklists of this Profile.


        :return: The blacklists of this Profile.
        :rtype: List[str]
        """
        return self._blacklists

    @blacklists.setter
    def blacklists(self, blacklists):
        """Sets the blacklists of this Profile.


        :param blacklists: The blacklists of this Profile.
        :type blacklists: List[str]
        """
        if blacklists is None:
            raise ValueError("Invalid value for `blacklists`, must not be `None`")  # noqa: E501

        self._blacklists = blacklists

    @property
    def created(self):
        """Gets the created of this Profile.


        :return: The created of this Profile.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Profile.


        :param created: The created of this Profile.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def metadata(self):
        """Gets the metadata of this Profile.


        :return: The metadata of this Profile.
        :rtype: ProfileMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Profile.


        :param metadata: The metadata of this Profile.
        :type metadata: ProfileMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Profile.


        :return: The name of this Profile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Profile.


        :param name: The name of this Profile.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def post_count(self):
        """Gets the post_count of this Profile.


        :return: The post_count of this Profile.
        :rtype: int
        """
        return self._post_count

    @post_count.setter
    def post_count(self, post_count):
        """Sets the post_count of this Profile.


        :param post_count: The post_count of this Profile.
        :type post_count: int
        """
        if post_count is None:
            raise ValueError("Invalid value for `post_count`, must not be `None`")  # noqa: E501

        self._post_count = post_count

    @property
    def reputation(self):
        """Gets the reputation of this Profile.


        :return: The reputation of this Profile.
        :rtype: int
        """
        return self._reputation

    @reputation.setter
    def reputation(self, reputation):
        """Sets the reputation of this Profile.


        :param reputation: The reputation of this Profile.
        :type reputation: int
        """
        if reputation is None:
            raise ValueError("Invalid value for `reputation`, must not be `None`")  # noqa: E501

        self._reputation = reputation

    @property
    def stats(self):
        """Gets the stats of this Profile.


        :return: The stats of this Profile.
        :rtype: ProfileStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Profile.


        :param stats: The stats of this Profile.
        :type stats: ProfileStats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")  # noqa: E501

        self._stats = stats
