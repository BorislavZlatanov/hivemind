# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ListCommunitesRequestParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last=None, limit=100, query=None, sort='rank', observer=None):  # noqa: E501
        """ListCommunitesRequestParams - a model defined in OpenAPI

        :param last: The last of this ListCommunitesRequestParams.  # noqa: E501
        :type last: str
        :param limit: The limit of this ListCommunitesRequestParams.  # noqa: E501
        :type limit: int
        :param query: The query of this ListCommunitesRequestParams.  # noqa: E501
        :type query: str
        :param sort: The sort of this ListCommunitesRequestParams.  # noqa: E501
        :type sort: str
        :param observer: The observer of this ListCommunitesRequestParams.  # noqa: E501
        :type observer: str
        """
        self.openapi_types = {
            'last': str,
            'limit': int,
            'query': str,
            'sort': str,
            'observer': str
        }

        self.attribute_map = {
            'last': 'last',
            'limit': 'limit',
            'query': 'query',
            'sort': 'sort',
            'observer': 'observer'
        }

        self._last = last
        self._limit = limit
        self._query = query
        self._sort = sort
        self._observer = observer

    @classmethod
    def from_dict(cls, dikt) -> 'ListCommunitesRequestParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ListCommunitesRequest_params of this ListCommunitesRequestParams.  # noqa: E501
        :rtype: ListCommunitesRequestParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last(self):
        """Gets the last of this ListCommunitesRequestParams.

        name of community; paging mechanism (cuts out this and \"higher\" communities, depends on chosen ranking)  # noqa: E501

        :return: The last of this ListCommunitesRequestParams.
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this ListCommunitesRequestParams.

        name of community; paging mechanism (cuts out this and \"higher\" communities, depends on chosen ranking)  # noqa: E501

        :param last: The last of this ListCommunitesRequestParams.
        :type last: str
        """

        self._last = last

    @property
    def limit(self):
        """Gets the limit of this ListCommunitesRequestParams.

        limit number of listed communities  # noqa: E501

        :return: The limit of this ListCommunitesRequestParams.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListCommunitesRequestParams.

        limit number of listed communities  # noqa: E501

        :param limit: The limit of this ListCommunitesRequestParams.
        :type limit: int
        """
        if limit is not None and limit > 100:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `100`")  # noqa: E501
        if limit is not None and limit < 1:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limit = limit

    @property
    def query(self):
        """Gets the query of this ListCommunitesRequestParams.

        when given turns on filtering for given set of words - words are looked for in \"title\" and \"about\" fields  # noqa: E501

        :return: The query of this ListCommunitesRequestParams.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ListCommunitesRequestParams.

        when given turns on filtering for given set of words - words are looked for in \"title\" and \"about\" fields  # noqa: E501

        :param query: The query of this ListCommunitesRequestParams.
        :type query: str
        """

        self._query = query

    @property
    def sort(self):
        """Gets the sort of this ListCommunitesRequestParams.

         determines order of returned communities  # noqa: E501

        :return: The sort of this ListCommunitesRequestParams.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ListCommunitesRequestParams.

         determines order of returned communities  # noqa: E501

        :param sort: The sort of this ListCommunitesRequestParams.
        :type sort: str
        """
        allowed_values = ["rank", "new", "subs"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def observer(self):
        """Gets the observer of this ListCommunitesRequestParams.

        (can be skipped or passed empty), when passed has to point to valid account used to show relation between account and community (subscribed, role and title)  # noqa: E501

        :return: The observer of this ListCommunitesRequestParams.
        :rtype: str
        """
        return self._observer

    @observer.setter
    def observer(self, observer):
        """Sets the observer of this ListCommunitesRequestParams.

        (can be skipped or passed empty), when passed has to point to valid account used to show relation between account and community (subscribed, role and title)  # noqa: E501

        :param observer: The observer of this ListCommunitesRequestParams.
        :type observer: str
        """

        self._observer = observer
