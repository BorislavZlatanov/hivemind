# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ListCommunityRolesRequestParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, community=None, last=None, limit=100):  # noqa: E501
        """ListCommunityRolesRequestParams - a model defined in OpenAPI

        :param community: The community of this ListCommunityRolesRequestParams.  # noqa: E501
        :type community: str
        :param last: The last of this ListCommunityRolesRequestParams.  # noqa: E501
        :type last: str
        :param limit: The limit of this ListCommunityRolesRequestParams.  # noqa: E501
        :type limit: int
        """
        self.openapi_types = {
            'community': str,
            'last': str,
            'limit': int
        }

        self.attribute_map = {
            'community': 'community',
            'last': 'last',
            'limit': 'limit'
        }

        self._community = community
        self._last = last
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt) -> 'ListCommunityRolesRequestParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ListCommunityRolesRequest_params of this ListCommunityRolesRequestParams.  # noqa: E501
        :rtype: ListCommunityRolesRequestParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def community(self):
        """Gets the community of this ListCommunityRolesRequestParams.

        community name  # noqa: E501

        :return: The community of this ListCommunityRolesRequestParams.
        :rtype: str
        """
        return self._community

    @community.setter
    def community(self, community):
        """Sets the community of this ListCommunityRolesRequestParams.

        community name  # noqa: E501

        :param community: The community of this ListCommunityRolesRequestParams.
        :type community: str
        """
        if community is None:
            raise ValueError("Invalid value for `community`, must not be `None`")  # noqa: E501

        self._community = community

    @property
    def last(self):
        """Gets the last of this ListCommunityRolesRequestParams.

        name of community; paging mechanism (cuts out this and \"higher\" communities, depends on chosen ranking)  # noqa: E501

        :return: The last of this ListCommunityRolesRequestParams.
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this ListCommunityRolesRequestParams.

        name of community; paging mechanism (cuts out this and \"higher\" communities, depends on chosen ranking)  # noqa: E501

        :param last: The last of this ListCommunityRolesRequestParams.
        :type last: str
        """

        self._last = last

    @property
    def limit(self):
        """Gets the limit of this ListCommunityRolesRequestParams.

        limit number of listed communities  # noqa: E501

        :return: The limit of this ListCommunityRolesRequestParams.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListCommunityRolesRequestParams.

        limit number of listed communities  # noqa: E501

        :param limit: The limit of this ListCommunityRolesRequestParams.
        :type limit: int
        """
        if limit is not None and limit > 100:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `100`")  # noqa: E501
        if limit is not None and limit < 1:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limit = limit
