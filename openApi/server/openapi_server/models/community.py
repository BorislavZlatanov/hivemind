# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.community_context import CommunityContext
from openapi_server import util

from openapi_server.models.community_context import CommunityContext  # noqa: E501

class Community(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, about=None, admins=None, avatar_url=None, context=None, created_at=None, flag_text=None, is_nsfw=None, lang=None, name=None, num_authors=None, num_pending=None, settings=None, subscribers=None, sum_pending=None, team=None, title=None, type_id=None):  # noqa: E501
        """Community - a model defined in OpenAPI

        :param id: The id of this Community.  # noqa: E501
        :type id: int
        :param about: The about of this Community.  # noqa: E501
        :type about: str
        :param admins: The admins of this Community.  # noqa: E501
        :type admins: List[str]
        :param avatar_url: The avatar_url of this Community.  # noqa: E501
        :type avatar_url: str
        :param context: The context of this Community.  # noqa: E501
        :type context: CommunityContext
        :param created_at: The created_at of this Community.  # noqa: E501
        :type created_at: datetime
        :param flag_text: The flag_text of this Community.  # noqa: E501
        :type flag_text: str
        :param is_nsfw: The is_nsfw of this Community.  # noqa: E501
        :type is_nsfw: bool
        :param lang: The lang of this Community.  # noqa: E501
        :type lang: str
        :param name: The name of this Community.  # noqa: E501
        :type name: str
        :param num_authors: The num_authors of this Community.  # noqa: E501
        :type num_authors: int
        :param num_pending: The num_pending of this Community.  # noqa: E501
        :type num_pending: int
        :param settings: The settings of this Community.  # noqa: E501
        :type settings: object
        :param subscribers: The subscribers of this Community.  # noqa: E501
        :type subscribers: int
        :param sum_pending: The sum_pending of this Community.  # noqa: E501
        :type sum_pending: int
        :param team: The team of this Community.  # noqa: E501
        :type team: List[List[str]]
        :param title: The title of this Community.  # noqa: E501
        :type title: str
        :param type_id: The type_id of this Community.  # noqa: E501
        :type type_id: int
        """
        self.openapi_types = {
            'id': int,
            'about': str,
            'admins': List[str],
            'avatar_url': str,
            'context': CommunityContext,
            'created_at': datetime,
            'flag_text': str,
            'is_nsfw': bool,
            'lang': str,
            'name': str,
            'num_authors': int,
            'num_pending': int,
            'settings': object,
            'subscribers': int,
            'sum_pending': int,
            'team': List[List[str]],
            'title': str,
            'type_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'about': 'about',
            'admins': 'admins',
            'avatar_url': 'avatar_url',
            'context': 'context',
            'created_at': 'created_at',
            'flag_text': 'flag_text',
            'is_nsfw': 'is_nsfw',
            'lang': 'lang',
            'name': 'name',
            'num_authors': 'num_authors',
            'num_pending': 'num_pending',
            'settings': 'settings',
            'subscribers': 'subscribers',
            'sum_pending': 'sum_pending',
            'team': 'team',
            'title': 'title',
            'type_id': 'type_id'
        }

        self._id = id
        self._about = about
        self._admins = admins
        self._avatar_url = avatar_url
        self._context = context
        self._created_at = created_at
        self._flag_text = flag_text
        self._is_nsfw = is_nsfw
        self._lang = lang
        self._name = name
        self._num_authors = num_authors
        self._num_pending = num_pending
        self._settings = settings
        self._subscribers = subscribers
        self._sum_pending = sum_pending
        self._team = team
        self._title = title
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt) -> 'Community':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Community of this Community.  # noqa: E501
        :rtype: Community
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Community.


        :return: The id of this Community.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Community.


        :param id: The id of this Community.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def about(self):
        """Gets the about of this Community.


        :return: The about of this Community.
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this Community.


        :param about: The about of this Community.
        :type about: str
        """
        if about is None:
            raise ValueError("Invalid value for `about`, must not be `None`")  # noqa: E501

        self._about = about

    @property
    def admins(self):
        """Gets the admins of this Community.


        :return: The admins of this Community.
        :rtype: List[str]
        """
        return self._admins

    @admins.setter
    def admins(self, admins):
        """Sets the admins of this Community.


        :param admins: The admins of this Community.
        :type admins: List[str]
        """

        self._admins = admins

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Community.


        :return: The avatar_url of this Community.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Community.


        :param avatar_url: The avatar_url of this Community.
        :type avatar_url: str
        """
        if avatar_url is None:
            raise ValueError("Invalid value for `avatar_url`, must not be `None`")  # noqa: E501

        self._avatar_url = avatar_url

    @property
    def context(self):
        """Gets the context of this Community.


        :return: The context of this Community.
        :rtype: CommunityContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Community.


        :param context: The context of this Community.
        :type context: CommunityContext
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def created_at(self):
        """Gets the created_at of this Community.


        :return: The created_at of this Community.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Community.


        :param created_at: The created_at of this Community.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def flag_text(self):
        """Gets the flag_text of this Community.


        :return: The flag_text of this Community.
        :rtype: str
        """
        return self._flag_text

    @flag_text.setter
    def flag_text(self, flag_text):
        """Sets the flag_text of this Community.


        :param flag_text: The flag_text of this Community.
        :type flag_text: str
        """
        if flag_text is None:
            raise ValueError("Invalid value for `flag_text`, must not be `None`")  # noqa: E501

        self._flag_text = flag_text

    @property
    def is_nsfw(self):
        """Gets the is_nsfw of this Community.


        :return: The is_nsfw of this Community.
        :rtype: bool
        """
        return self._is_nsfw

    @is_nsfw.setter
    def is_nsfw(self, is_nsfw):
        """Sets the is_nsfw of this Community.


        :param is_nsfw: The is_nsfw of this Community.
        :type is_nsfw: bool
        """
        if is_nsfw is None:
            raise ValueError("Invalid value for `is_nsfw`, must not be `None`")  # noqa: E501

        self._is_nsfw = is_nsfw

    @property
    def lang(self):
        """Gets the lang of this Community.


        :return: The lang of this Community.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Community.


        :param lang: The lang of this Community.
        :type lang: str
        """
        if lang is None:
            raise ValueError("Invalid value for `lang`, must not be `None`")  # noqa: E501

        self._lang = lang

    @property
    def name(self):
        """Gets the name of this Community.


        :return: The name of this Community.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Community.


        :param name: The name of this Community.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def num_authors(self):
        """Gets the num_authors of this Community.


        :return: The num_authors of this Community.
        :rtype: int
        """
        return self._num_authors

    @num_authors.setter
    def num_authors(self, num_authors):
        """Sets the num_authors of this Community.


        :param num_authors: The num_authors of this Community.
        :type num_authors: int
        """
        if num_authors is None:
            raise ValueError("Invalid value for `num_authors`, must not be `None`")  # noqa: E501

        self._num_authors = num_authors

    @property
    def num_pending(self):
        """Gets the num_pending of this Community.


        :return: The num_pending of this Community.
        :rtype: int
        """
        return self._num_pending

    @num_pending.setter
    def num_pending(self, num_pending):
        """Sets the num_pending of this Community.


        :param num_pending: The num_pending of this Community.
        :type num_pending: int
        """
        if num_pending is None:
            raise ValueError("Invalid value for `num_pending`, must not be `None`")  # noqa: E501

        self._num_pending = num_pending

    @property
    def settings(self):
        """Gets the settings of this Community.


        :return: The settings of this Community.
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Community.


        :param settings: The settings of this Community.
        :type settings: object
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")  # noqa: E501

        self._settings = settings

    @property
    def subscribers(self):
        """Gets the subscribers of this Community.


        :return: The subscribers of this Community.
        :rtype: int
        """
        return self._subscribers

    @subscribers.setter
    def subscribers(self, subscribers):
        """Sets the subscribers of this Community.


        :param subscribers: The subscribers of this Community.
        :type subscribers: int
        """
        if subscribers is None:
            raise ValueError("Invalid value for `subscribers`, must not be `None`")  # noqa: E501

        self._subscribers = subscribers

    @property
    def sum_pending(self):
        """Gets the sum_pending of this Community.


        :return: The sum_pending of this Community.
        :rtype: int
        """
        return self._sum_pending

    @sum_pending.setter
    def sum_pending(self, sum_pending):
        """Sets the sum_pending of this Community.


        :param sum_pending: The sum_pending of this Community.
        :type sum_pending: int
        """
        if sum_pending is None:
            raise ValueError("Invalid value for `sum_pending`, must not be `None`")  # noqa: E501

        self._sum_pending = sum_pending

    @property
    def team(self):
        """Gets the team of this Community.

        array of arrays with 3 strings: name, role_name, title  # noqa: E501

        :return: The team of this Community.
        :rtype: List[List[str]]
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Community.

        array of arrays with 3 strings: name, role_name, title  # noqa: E501

        :param team: The team of this Community.
        :type team: List[List[str]]
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")  # noqa: E501

        self._team = team

    @property
    def title(self):
        """Gets the title of this Community.


        :return: The title of this Community.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Community.


        :param title: The title of this Community.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def type_id(self):
        """Gets the type_id of this Community.


        :return: The type_id of this Community.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this Community.


        :param type_id: The type_id of this Community.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id
