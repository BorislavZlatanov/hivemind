# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class GetDiscussionRequestParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author=None, permlink=None, observer=None):  # noqa: E501
        """GetDiscussionRequestParams - a model defined in OpenAPI

        :param author: The author of this GetDiscussionRequestParams.  # noqa: E501
        :type author: str
        :param permlink: The permlink of this GetDiscussionRequestParams.  # noqa: E501
        :type permlink: str
        :param observer: The observer of this GetDiscussionRequestParams.  # noqa: E501
        :type observer: str
        """
        self.openapi_types = {
            'author': str,
            'permlink': str,
            'observer': str
        }

        self.attribute_map = {
            'author': 'author',
            'permlink': 'permlink',
            'observer': 'observer'
        }

        self._author = author
        self._permlink = permlink
        self._observer = observer

    @classmethod
    def from_dict(cls, dikt) -> 'GetDiscussionRequestParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetDiscussionRequest_params of this GetDiscussionRequestParams.  # noqa: E501
        :rtype: GetDiscussionRequestParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this GetDiscussionRequestParams.

        valid account name  # noqa: E501

        :return: The author of this GetDiscussionRequestParams.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this GetDiscussionRequestParams.

        valid account name  # noqa: E501

        :param author: The author of this GetDiscussionRequestParams.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def permlink(self):
        """Gets the permlink of this GetDiscussionRequestParams.

        post permlink of given author, have to point on valid post  # noqa: E501

        :return: The permlink of this GetDiscussionRequestParams.
        :rtype: str
        """
        return self._permlink

    @permlink.setter
    def permlink(self, permlink):
        """Sets the permlink of this GetDiscussionRequestParams.

        post permlink of given author, have to point on valid post  # noqa: E501

        :param permlink: The permlink of this GetDiscussionRequestParams.
        :type permlink: str
        """
        if permlink is None:
            raise ValueError("Invalid value for `permlink`, must not be `None`")  # noqa: E501

        self._permlink = permlink

    @property
    def observer(self):
        """Gets the observer of this GetDiscussionRequestParams.

        account name, used to filter out discussion branches starting at posts authored by accounts ignored directly or indirectly by the observer  # noqa: E501

        :return: The observer of this GetDiscussionRequestParams.
        :rtype: str
        """
        return self._observer

    @observer.setter
    def observer(self, observer):
        """Sets the observer of this GetDiscussionRequestParams.

        account name, used to filter out discussion branches starting at posts authored by accounts ignored directly or indirectly by the observer  # noqa: E501

        :param observer: The observer of this GetDiscussionRequestParams.
        :type observer: str
        """

        self._observer = observer
