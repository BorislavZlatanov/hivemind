"""
    Hivemind OpenAPI Specification

    An OpenAPI specification for Hivemind  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.account_notifications_request import AccountNotificationsRequest
from openapi_client.model.community_context_request import CommunityContextRequest
from openapi_client.model.community_request import CommunityRequest
from openapi_client.model.does_user_follow_any_lists_request import DoesUserFollowAnyListsRequest
from openapi_client.model.get_account_posts_request import GetAccountPostsRequest
from openapi_client.model.get_discussion_request import GetDiscussionRequest
from openapi_client.model.get_follow_list_request import GetFollowListRequest
from openapi_client.model.get_payout_stats_request import GetPayoutStatsRequest
from openapi_client.model.get_post_request import GetPostRequest
from openapi_client.model.get_profile_request import GetProfileRequest
from openapi_client.model.list_all_subscriptions_request import ListAllSubscriptionsRequest
from openapi_client.model.list_communites_request import ListCommunitesRequest
from openapi_client.model.list_community_roles_request import ListCommunityRolesRequest
from openapi_client.model.list_pop_communites_request import ListPopCommunitesRequest
from openapi_client.model.list_subscribers_request import ListSubscribersRequest


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __bridge_account_notifications(
            self,
            account_notifications_request,
            **kwargs
        ):
            """bridge_account_notifications  # noqa: E501

            Lists notifications for given account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_account_notifications(account_notifications_request, async_req=True)
            >>> result = thread.get()

            Args:
                account_notifications_request (AccountNotificationsRequest): required account, optional: min_score, last_id, limit

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_notifications_request'] = \
                account_notifications_request
            return self.call_with_http_info(**kwargs)

        self.bridge_account_notifications = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.account_notifications',
                'operation_id': 'bridge_account_notifications',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_notifications_request',
                ],
                'required': [
                    'account_notifications_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_notifications_request':
                        (AccountNotificationsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'account_notifications_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_account_notifications
        )

        def __bridge_does_user_follow_any_lists(
            self,
            does_user_follow_any_lists_request,
            **kwargs
        ):
            """bridge_does_user_follow_any_lists  # noqa: E501

            Tells if given observer follows any blacklist or mute list  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_does_user_follow_any_lists(does_user_follow_any_lists_request, async_req=True)
            >>> result = thread.get()

            Args:
                does_user_follow_any_lists_request (DoesUserFollowAnyListsRequest): required observer

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['does_user_follow_any_lists_request'] = \
                does_user_follow_any_lists_request
            return self.call_with_http_info(**kwargs)

        self.bridge_does_user_follow_any_lists = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.does_user_follow_any_lists',
                'operation_id': 'bridge_does_user_follow_any_lists',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'does_user_follow_any_lists_request',
                ],
                'required': [
                    'does_user_follow_any_lists_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'does_user_follow_any_lists_request':
                        (DoesUserFollowAnyListsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'does_user_follow_any_lists_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_does_user_follow_any_lists
        )

        def __bridge_get_account_posts(
            self,
            get_account_posts_request,
            **kwargs
        ):
            """bridge_get_account_posts  # noqa: E501

            Lists posts related to given account in selected way.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_get_account_posts(get_account_posts_request, async_req=True)
            >>> result = thread.get()

            Args:
                get_account_posts_request (GetAccountPostsRequest): required: sort, account, optional: start_author, start_permlink, limit, observer

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['get_account_posts_request'] = \
                get_account_posts_request
            return self.call_with_http_info(**kwargs)

        self.bridge_get_account_posts = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.get_account_posts',
                'operation_id': 'bridge_get_account_posts',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_account_posts_request',
                ],
                'required': [
                    'get_account_posts_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_account_posts_request':
                        (GetAccountPostsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_account_posts_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_get_account_posts
        )

        def __bridge_get_community(
            self,
            community_request,
            **kwargs
        ):
            """bridge_get_community  # noqa: E501

            Gets community  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_get_community(community_request, async_req=True)
            >>> result = thread.get()

            Args:
                community_request (CommunityRequest): community name and optional observer

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['community_request'] = \
                community_request
            return self.call_with_http_info(**kwargs)

        self.bridge_get_community = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.get_community',
                'operation_id': 'bridge_get_community',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'community_request',
                ],
                'required': [
                    'community_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'community_request':
                        (CommunityRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'community_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_get_community
        )

        def __bridge_get_community_context(
            self,
            community_context_request,
            **kwargs
        ):
            """bridge_get_community_context  # noqa: E501

            Gets community context  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_get_community_context(community_context_request, async_req=True)
            >>> result = thread.get()

            Args:
                community_context_request (CommunityContextRequest): community name and account for context

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['community_context_request'] = \
                community_context_request
            return self.call_with_http_info(**kwargs)

        self.bridge_get_community_context = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.get_community_context',
                'operation_id': 'bridge_get_community_context',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'community_context_request',
                ],
                'required': [
                    'community_context_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'community_context_request':
                        (CommunityContextRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'community_context_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_get_community_context
        )

        def __bridge_get_discussion(
            self,
            get_discussion_request,
            **kwargs
        ):
            """bridge_get_discussion  # noqa: E501

            Gives flattened discussion tree starting at given post.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_get_discussion(get_discussion_request, async_req=True)
            >>> result = thread.get()

            Args:
                get_discussion_request (GetDiscussionRequest): required: author, permlink, optional: observer

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['get_discussion_request'] = \
                get_discussion_request
            return self.call_with_http_info(**kwargs)

        self.bridge_get_discussion = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.get_discussion',
                'operation_id': 'bridge_get_discussion',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_discussion_request',
                ],
                'required': [
                    'get_discussion_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_discussion_request':
                        (GetDiscussionRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_discussion_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_get_discussion
        )

        def __bridge_get_follow_list(
            self,
            get_follow_list_request,
            **kwargs
        ):
            """bridge_get_follow_list  # noqa: E501

            For given observer gives directly blacklisted/muted accounts or list of blacklists/mute lists followed by observer  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_get_follow_list(get_follow_list_request, async_req=True)
            >>> result = thread.get()

            Args:
                get_follow_list_request (GetFollowListRequest): required: observer, optional: follow_type

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['get_follow_list_request'] = \
                get_follow_list_request
            return self.call_with_http_info(**kwargs)

        self.bridge_get_follow_list = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.get_follow_list',
                'operation_id': 'bridge_get_follow_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_follow_list_request',
                ],
                'required': [
                    'get_follow_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_follow_list_request':
                        (GetFollowListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_follow_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_get_follow_list
        )

        def __bridge_get_payout_stats(
            self,
            get_payout_stats_request,
            **kwargs
        ):
            """bridge_get_payout_stats  # noqa: E501

            Lists communities ordered by payout with stats (total payout, number of posts and authors).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_get_payout_stats(get_payout_stats_request, async_req=True)
            >>> result = thread.get()

            Args:
                get_payout_stats_request (GetPayoutStatsRequest): optional: limit

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['get_payout_stats_request'] = \
                get_payout_stats_request
            return self.call_with_http_info(**kwargs)

        self.bridge_get_payout_stats = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.get_payout_stats',
                'operation_id': 'bridge_get_payout_stats',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_payout_stats_request',
                ],
                'required': [
                    'get_payout_stats_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_payout_stats_request':
                        (GetPayoutStatsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_payout_stats_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_get_payout_stats
        )

        def __bridge_get_post(
            self,
            get_post_request,
            **kwargs
        ):
            """bridge_get_post  # noqa: E501

            Gives single selected post.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_get_post(get_post_request, async_req=True)
            >>> result = thread.get()

            Args:
                get_post_request (GetPostRequest): required: author, permlink, optional: observer

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['get_post_request'] = \
                get_post_request
            return self.call_with_http_info(**kwargs)

        self.bridge_get_post = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.get_post',
                'operation_id': 'bridge_get_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_post_request',
                ],
                'required': [
                    'get_post_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_post_request':
                        (GetPostRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_post_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_get_post
        )

        def __bridge_get_profile(
            self,
            get_profile_request,
            **kwargs
        ):
            """bridge_get_profile  # noqa: E501

            Gets profile  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_get_profile(get_profile_request, async_req=True)
            >>> result = thread.get()

            Args:
                get_profile_request (GetProfileRequest): required account, optional: observer

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['get_profile_request'] = \
                get_profile_request
            return self.call_with_http_info(**kwargs)

        self.bridge_get_profile = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.get_profile',
                'operation_id': 'bridge_get_profile',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_profile_request',
                ],
                'required': [
                    'get_profile_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_profile_request':
                        (GetProfileRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_profile_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_get_profile
        )

        def __bridge_list_all_subscriptions(
            self,
            list_all_subscriptions_request,
            **kwargs
        ):
            """bridge_list_all_subscriptions  # noqa: E501

            Lists all community contexts from communities given account is subscribed to.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_list_all_subscriptions(list_all_subscriptions_request, async_req=True)
            >>> result = thread.get()

            Args:
                list_all_subscriptions_request (ListAllSubscriptionsRequest): points to valid account (not necessarily subscibed to any community)

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_all_subscriptions_request'] = \
                list_all_subscriptions_request
            return self.call_with_http_info(**kwargs)

        self.bridge_list_all_subscriptions = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.list_all_subscriptions',
                'operation_id': 'bridge_list_all_subscriptions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_all_subscriptions_request',
                ],
                'required': [
                    'list_all_subscriptions_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_all_subscriptions_request':
                        (ListAllSubscriptionsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_all_subscriptions_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_list_all_subscriptions
        )

        def __bridge_list_communities(
            self,
            list_communites_request,
            **kwargs
        ):
            """bridge_list_communities  # noqa: E501

            Gets community  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_list_communities(list_communites_request, async_req=True)
            >>> result = thread.get()

            Args:
                list_communites_request (ListCommunitesRequest): optional parameters: last, limit, query, sort, observer

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_communites_request'] = \
                list_communites_request
            return self.call_with_http_info(**kwargs)

        self.bridge_list_communities = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.list_communities',
                'operation_id': 'bridge_list_communities',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_communites_request',
                ],
                'required': [
                    'list_communites_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_communites_request':
                        (ListCommunitesRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_communites_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_list_communities
        )

        def __bridge_list_community_roles(
            self,
            list_community_roles_request,
            **kwargs
        ):
            """bridge_list_community_roles  # noqa: E501

            Gets community  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_list_community_roles(list_community_roles_request, async_req=True)
            >>> result = thread.get()

            Args:
                list_community_roles_request (ListCommunityRolesRequest): community name and optional observer

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_community_roles_request'] = \
                list_community_roles_request
            return self.call_with_http_info(**kwargs)

        self.bridge_list_community_roles = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.list_community_roles',
                'operation_id': 'bridge_list_community_roles',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_community_roles_request',
                ],
                'required': [
                    'list_community_roles_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_community_roles_request':
                        (ListCommunityRolesRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_community_roles_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_list_community_roles
        )

        def __bridge_list_pop_communities(
            self,
            list_pop_communites_request,
            **kwargs
        ):
            """bridge_list_pop_communities  # noqa: E501

            Gets community  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_list_pop_communities(list_pop_communites_request, async_req=True)
            >>> result = thread.get()

            Args:
                list_pop_communites_request (ListPopCommunitesRequest): optional parameter: limit

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_pop_communites_request'] = \
                list_pop_communites_request
            return self.call_with_http_info(**kwargs)

        self.bridge_list_pop_communities = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.list_pop_communities',
                'operation_id': 'bridge_list_pop_communities',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_pop_communites_request',
                ],
                'required': [
                    'list_pop_communites_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_pop_communites_request':
                        (ListPopCommunitesRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_pop_communites_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_list_pop_communities
        )

        def __bridge_list_subscribers(
            self,
            list_subscribers_request,
            **kwargs
        ):
            """bridge_list_subscribers  # noqa: E501

            list subscribers  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.bridge_list_subscribers(list_subscribers_request, async_req=True)
            >>> result = thread.get()

            Args:
                list_subscribers_request (ListSubscribersRequest): required community, optional: last, limit

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_subscribers_request'] = \
                list_subscribers_request
            return self.call_with_http_info(**kwargs)

        self.bridge_list_subscribers = Endpoint(
            settings={
                'response_type': (object,),
                'auth': [],
                'endpoint_path': '/#bridge.list_subscribers',
                'operation_id': 'bridge_list_subscribers',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_subscribers_request',
                ],
                'required': [
                    'list_subscribers_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_subscribers_request':
                        (ListSubscribersRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_subscribers_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__bridge_list_subscribers
        )
