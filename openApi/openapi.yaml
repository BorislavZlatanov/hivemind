#todo fix not working additionalProperties: false
openapi: 3.0.2
info:
  title: Hivemind OpenAPI Specification
  description: 'An OpenAPI specification for Hivemind'
  version: "1.0"
servers:
  - url: https://api.hive.blog
    description: hive.blog API Service
  - url: https://anyx.io
    description: anyx.io API Service
  - url: https://beta.openhive.network
    description: beta.openhive.network API Service
  - url: http://localhost:8080
    description: Hivemind local API Service
components:
  schemas:
    ListCommunityRoles:
      $ref: './bridge_api/schemas/listCommunityRoles.yaml'

    CommunityContext:
      $ref: './bridge_api/schemas/communityContext.yaml'

    ErrorMessage:
      $ref: './schemas/errorMessage.yaml'

    CurrencyValue:
      $ref: './schemas/currencyValue.yaml'

    Comments:
      $ref: './database_api/schemas/comments.yaml'

    Comment:
      $ref: './database_api/schemas/comment.yaml'

    Votes:
      $ref: './database_api/schemas/votes.yaml'

paths:
  /#bridge.get_community:
    post:
      tags:
        - Community
      description: Gets community
      operationId: bridge.get_community
      requestBody:
        description: community name and optional observer
        content:
          'application/json':
            schema:
              $ref: './bridge_api/requests/communityRequest.yaml'
        required: true
      responses:
        '200':
          description: Community result
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: './bridge_api/schemas/community.yaml'
              example:
                jsonrpc: '2.0'
                result:
                  id: 92511
                  name: hive-186713
                  title: Test group
                  about: this is about field
                  lang: pl
                  type_id: 1
                  is_nsfw: true
                  subscribers: 0
                  created_at: '2016-09-15 19:47:15'
                  sum_pending: 0
                  num_pending: 0
                  num_authors: 0
                  avatar_url: ''
                  description: |-
                    this is description
                    second line of description
                  flag_text: |-
                    first rule
                    second rule
                    third rule
                    and the last rule
                  settings: { }
                  context:
                    role: guest
                    subscribed: false
                    title: ''
                  team:
                    - - hive-186713
                      - owner
                      - ''
                id: 1

  /#bridge.get_community_context:
    post:
      tags:
        - Community
      description: Gets community context
      operationId: bridge.get_community_context
      requestBody:
        description: community name and account for context
        content:
          'application/json':
            schema:
              $ref: './bridge_api/requests/communityContextRequest.yaml'
        required: true
      responses:
        '200':
          description: Community context result
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: './bridge_api/schemas/communityContextResponse.yaml'

  /#bridge.list_all_subscriptions:
    post:
      tags:
        - Community
      description: Lists all community contexts from communities given account is subscribed to.
      operationId: bridge.list_all_subscriptions
      requestBody:
        description: points to valid account (not necessarily subscibed to any community)
        content:
          'application/json':
            schema:
              $ref: './bridge_api/requests/listAllSubscriptionsRequest.yaml'
        required: true
      responses:
        '200':
          description: all subscriptions list
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: './bridge_api/schemas/listAllSubscriptions.yaml'

  /#bridge.list_communities:
    post:
      tags:
        - Community
      description: Gets community
      operationId: bridge.list_communities
      requestBody:
        description: 'optional parameters: last, limit, query, sort, observer'
        content:
          'application/json':
            schema:
              $ref: './bridge_api/requests/listCommunitesRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Communities
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: './bridge_api/schemas/listCommunity.yaml'

  /#bridge.list_community_roles:
    post:
      tags:
        - Community
      description: Gets community
      operationId: bridge.list_community_roles
      requestBody:
        description: community name and optional observer
        content:
          'application/json':
            schema:
              $ref: './bridge_api/requests/listCommunityRolesRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Community roles
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: './bridge_api/schemas/listCommunityRoles.yaml'

  /#bridge.list_pop_communities:
    post:
      tags:
        - Community
      description: Gets community
      operationId: bridge.list_pop_communities
      requestBody:
        description: 'optional parameter: limit'
        content:
          'application/json':
            schema:
              $ref: './bridge_api/requests/listPopCommunitesRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Communities
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: './bridge_api/schemas/listPopCommunities.yaml'

  /#bridge.list_subscribers:
    post:
      tags:
        - Community
      description: list subscribers
      operationId: bridge.list_subscribers
      requestBody:
        description: 'required community, optional: last, limit'
        content:
          'application/json':
            schema:
              $ref: './bridge_api/requests/listSubscribersRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Communities
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: './bridge_api/schemas/listSubscribers.yaml'

  /#database_api.find_comments:
    post:
      tags:
        - Database
      description: find comments
      operationId: database_api.find_comments
      requestBody:
        description: 'Looks for given comments.'
        content:
          'application/json':
            schema:
              $ref: './database_api/requests/findCommentsRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Communities
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: '#/components/schemas/Comments'

  /#database_api.list_comments[by_author_last_update]:
    post:
      tags:
        - Database
      description: list comments
      operationId: database_api.list_comments[by_author_last_update]
      requestBody:
        description: 'Lists posts of given author that are not newer than given date.'
        content:
          'application/json':
            schema:
              $ref: './database_api/requests/listCommentsByAuthorRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Communities
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: '#/components/schemas/Comments'

  /#database_api.list_comments[by_cashout_time]:
    post:
      tags:
        - Database
      description: list comments
      operationId: database_api.list_comments[by_cashout_time]
      requestBody:
        description: 'Lists comments with cashout at or later than given date'
        content:
          'application/json':
            schema:
              $ref: './database_api/requests/listCommentsByCashoutTimeRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Communities
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: '#/components/schemas/Comments'

  /#database_api.list_comments[by_last_update]:
    post:
      tags:
        - Database
      description: list comments
      operationId: database_api.list_comments[by_last_update]
      requestBody:
        description: 'Lists replies to posts of given author that are not newer than given date.'
        content:
          'application/json':
            schema:
              $ref: './database_api/requests/listCommentsByLastUpdateRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Communities
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: '#/components/schemas/Comments'

  /#database_api.list_comments[by_parent]:
    post:
      tags:
        - Database
      description: list comments
      operationId: database_api.list_comments[by_parent]
      requestBody:
        description: 'Lists replies to given post.'
        content:
          'application/json':
            schema:
              $ref: './database_api/requests/listCommentsByParentRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Communities
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: '#/components/schemas/Comments'

  /#database_api.list_comments[by_permlink]:
    post:
      tags:
        - Database
      description: list comments
      operationId: database_api.list_comments[by_permlink]
      requestBody:
        description: 'Lists comments sorted by author and later with permlink, starting not earlier than given parameters. Can be used also in situation when only part of author name or permlink is known.'
        content:
          'application/json':
            schema:
              $ref: './database_api/requests/listCommentsByPermlinkRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Communities
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: '#/components/schemas/Comments'

  /#database_api.list_comments[by_root]:
    post:
      tags:
        - Database
      description: list comments
      operationId: database_api.list_comments[by_root]
      requestBody:
        description: 'Lists comments from given discussion indicated by root post.'
        content:
          'application/json':
            schema:
              $ref: './database_api/requests/listCommentsByRootRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Communities
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: '#/components/schemas/Comments'

  /#database_api.find_votes:
    post:
      tags:
        - Database
      description: find votes
      operationId: database_api.find_votes
      requestBody:
        description: 'Lists votes that were cast on given post. author + permlink : mandatory, points to valid post. Pretty much the same as "list_votes" with "by_comment_voter" order, but without paging and with hardcoded 1000 limit.'
        content:
          'application/json':
            schema:
              $ref: './database_api/requests/findVotesRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Communities
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: '#/components/schemas/Votes'

  /#database_api.list_votes:
    post:
      tags:
        - Database
      description: list votes
      operationId: database_api.list_votes
      requestBody:
        description: 'Lists votes that were cast on given post.'
        content:
          'application/json':
            schema:
              $ref: './database_api/requests/listVotesRequest.yaml'
        required: true
      responses:
        '200':
          description: list of Votes
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: '#/components/schemas/Votes'

  /#hive.db_head_state:
    post:
      tags:
        - Hive
      description: DB head state
      operationId: hive.db_head_state
      requestBody:
        description: 'Get current head state'
        content:
          'application/json':
            schema:
              $ref: './hive_api/requests/headStateRequest.yaml'
        required: true
      responses:
        '200':
          description: current head state
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: './hive_api/schemas/headState.yaml'

  /#hive.get_info:
    post:
      tags:
        - Hive
      description: DB head state
      operationId: hive.get_info
      requestBody:
        description: 'Get current database and hivemind state'
        content:
          'application/json':
            schema:
              $ref: './hive_api/requests/getInfoRequest.yaml'
        required: true
      responses:
        '200':
          description: DB head state
          content:
            'application/json; charset=utf-8':
              schema:
                $ref: './hive_api/schemas/getInfo.yaml'
